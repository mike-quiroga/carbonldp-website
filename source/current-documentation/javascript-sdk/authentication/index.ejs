---
layout: document
title: Authentication
description: Logging in, logging out and everything you need to know about it.
date: 2017-02-08 11:57:57
---

<h1>Authentication</h1>
					

<div class="documentation-steps ui fluid steps">
	<a class="step" href="../querying">
		<i class="arrow left icon"></i>
		<div class="content">
			<div class="title">Previous</div>
			<div class="description">Querying</div>
		</div>
	</a>
	<div class="active step">
		<!--<i class="payment icon"></i>-->
		<div class="content">
			<div class="title">Authentication</div>
		</div>
	</div>
	<a class="step" href="../authorization">
		<i class="arrow right icon"></i>
		<div class="content">
			<div class="title">Next</div>
			<div class="description">Authorization</div>
		</div>
	</a>
</div>

	<div class="ui mobile only grid">
		<div class="row">
			<staticContentMenu content="mainContent"></staticContentMenu>
		</div>
	</div>
<section class="mainContent-section">
	<h2 class="hidden">Introduction</h2>
	<p>Authenticating a user was briefly covered in the <a href="../getting-started">Getting Started</a> page. This page we'll provide more
		information about authentication in general.</p>
</section>
<section class="mainContent-section">
	<h2>Logging in</h2>
	<p>As discussed before, a user can be authenticated on a platform instance by using the <code>authenticate</code> method in the <code>Auth</code> service, e.g.:</p>
	<tabs>
		<tab title="TypeScript">
			
			<pre><code class="typescript">
				// ... additional imports
				import Carbon from "carbonldp/Carbon";
				import * as Token from "carbonldp/Auth/Token";

				let carbon:Carbon;

				// ... initialize your Carbon object

				carbon.auth.authenticate( "your@email.com", "YouRP455word" ).then(
					( token:Token.Class ) => &#123;
						console.log( carbon.auth.authenticatedUser ); // Yourself!
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES2015">
			
			<pre><code class="javascript">
				// ... imports

				let carbon;

				// ... initialize your Carbon object

				carbon.auth.authenticate( "your@email.com", "YouRP455word" ).then(
					( token ) => &#123;
						console.log( carbon.auth.authenticatedUser); // Yourself!
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES5">
			
			<pre><code class="javascript">
				var carbon;

				// ... initialize your Carbon object

				carbon.auth.authenticate( "your@email.com", "YouRP455word" ).then(
					function( token ) &#123;
						console.log( carbon.auth.authenticatedUser ); // Yourself!
					&#125;
				);
			</code></pre>
			
		</tab>
	</tabs>
	<p>This method will retrieve a <a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">JWT</a> token that represents your authentication with the platform,
		and stores it inside of the <code>carbon</code> object you called the method in. This means that all requests made by any service of that
		object will use that authentication.</p>

	<section class="mainContent-subSection">
		<h3>Keeping authentication across page loads</h3>
		<p>As long as your application can hold a reference of the platform instance you are working on, you'll be able to maintain your user's authentication. But what happens if you
			want to keep your users authenticated across page loads?</p>
		<p>The answer lies on the <a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">JWT</a> the <code>authenticate</code> method returns. This token
			can be saved to later use it to authenticate the user again with the <code>authenticateUsing</code> method in the <code>Auth</code> service.</p>
		<p>Here's an example on how to do that using cookies, but local storage or any other persistence method could be used:</p>
		<tabs>
			<tab title="TypeScript">
				
				<pre><code class="typescript">
					// ... additional imports
					import * as Errors from "carbonldp/Errors";
					import * as HTTP from "carbonldp/HTTP";
					import * as Token from "carbonldp/Auth/Token";

					let carbon:Carbon;

					// ... initialize your Carbon object

					function authenticate( username:string, password:string, rememberMe:boolean ):Promise&#60;Token.Class&#62; &#123;
						return carbon.authenticate( username, password ).then(
							( token:Token.Class ) => &#123;
								if( rememberMe ) &#123;
									let cookieValue:string = JSON.stringify( &#123;
										expirationTime: token.expirationTime,
										key: token.key
									&#125; );
									setCookie( "auth-token", cookieValue, 3 );
								&#125;
							&#125;
						);
					&#125;

					// When starting the application this method could be called to try to authenticate the user and if not, present him with a login form
					function reAuthenticate():Promise&#60;Token.Class&#62; &#123;
						let authCookie:string | null = getCookie( "auth-token" );
						if( authCookie === null ) return Promise.reject( "There's no saved token to authenticate with" );

						let savedToken:&#123; expirationTime:Date, key:string &#125;;
						try &#123;
							savedToken = JSON.parse( authCookie );
						&#125; catch( error ) &#123;
							deleteCookie( "auth-token" );
							return Promise.reject( "The saved token couldn't be parsed" );
						&#125;

						return carbon.authenticateUsing( "TOKEN", savedToken ).catch(
							( error ) => &#123;
								if( error instanceof Errors.IllegalArgumentError || error instanceof HTTP.Errors.UnauthorizedError ) &#123;
									// Invalid token
									deleteCookie( "auth-token" );
									return Promise.reject( "The saved token was invalid" );
								&#125; else return Promise.reject( error );
							&#125;
						);
					&#125;

					// Simple function to retrieve a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function getCookie( name:string ):string | null &#123;
						let cookies:string[] = document.cookie.split( ";" );
						for( let cookie in cookies ) &#123;
							cookie = cookie.trim();
							if( cookie.indexOf( `$&#123;name&#125;=` ) === 0 ) return c.substring( `$&#123;name&#125;=`.length, cookie.length );
						&#125;
						return null;
					}
					// Simple function to set a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function setCookie( name:string, value:string, days:number ):void &#123;
						let expires:string = "";
						if( days ) &#123;
							let date:Date = new Date();
							date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );
							expires = `; expires=$&#123; date.toUTCString() &#125;`;
						&#125;
						document.cookie = `$&#123; name &#125;=$&#123; value &#125;$&#123; expires &#125;; path=/`;
					&#125;
					// Simple function to delete a cookie using vanilla JavaScript. jQuery $.removeCookie method could be used instead
					function deleteCookie( name:string ):void &#123;
						setCookie( name, "", -1 );
					&#125;
				</code></pre>
				
			</tab>
			<tab title="JavaScript ES2015">
				
				<pre><code class="javascript">
					// ... imports

					let carbon;

					// ... initialize your Carbon object


					function authenticate( username, password, rememberMe ) &#123;
						return carbon.authenticate( username, password ).then(
							( token ) => &#123;
								if( rememberMe ) &#123;
									let cookieValue = JSON.stringify( &#123;
										expirationTime: token.expirationTime,
										key: token.key
									&#125; );
									setCookie( "auth-token", cookieValue, 3 );
								&#125;
							&#125;
						);
					&#125;

					// When starting the application this method could be called to try to authenticate the user and if not, present him with a login form
					function reAuthenticate() &#123;
						let authCookie = getCookie( "auth-token" );
						if( authCookie === null ) return Promise.reject( "There's no saved token to authenticate with" );

						let savedToken;
						try &#123;
							savedToken = JSON.parse( authCookie );
						&#125; catch( error ) &#123;
							deleteCookie( "auth-token" );
							return Promise.reject( "The saved token couldn't be parsed" );
						&#125;

						return carbon.authenticateUsing( "TOKEN", savedToken ).catch(
							( error ) => &#123;
								if( error instanceof Errors.IllegalArgumentError || error instanceof HTTP.Errors.UnauthorizedError ) &#123;
									// Invalid token
									deleteCookie( "auth-token" );
									return Promise.reject( "The saved token was invalid" );
								&#125; else return Promise.reject( error );
							&#125;
						);
					&#125;

					// Simple function to retrieve a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function getCookie( name ) &#123;
						let cookies[] = document.cookie.split( ";" );
						for( let cookie in cookies ) &#123;
							cookie = cookie.trim();
							if( cookie.indexOf( `$&#123;name&#125;=` ) === 0 ) return c.substring( `$&#123;name&#125;=`.length, cookie.length );
						&#125;
						return null;
					}
					// Simple function to set a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function setCookie( name, value, days ) &#123;
						let expires = "";
						if( days ) &#123;
							let date = new Date();
							date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );
							expires = `; expires=$&#123; date.toUTCString() &#125;`;
						&#125;
						document.cookie = `$&#123; name &#125;=$&#123; value &#125;$&#123; expires &#125;; path=/`;
					&#125;
					// Simple function to delete a cookie using vanilla JavaScript. jQuery $.removeCookie method could be used instead
					function deleteCookie( name ) &#123;
						setCookie( name, "", -1 );
					&#125;
				</code></pre>
				
			</tab>
			<tab title="JavaScript ES5">
				
				<pre><code class="javascript">
					var carbon;

					// ... initialize your Carbon object


					function authenticate( username, password, rememberMe ) &#123;
						return carbon.authenticate( username, password ).then(
							function( token ) &#123;
								if( rememberMe ) &#123;
									var cookieValue = JSON.stringify( &#123;
										expirationTime: token.expirationTime,
										key: token.key
									&#125; );
									setCookie( "auth-token", cookieValue, 3 );
								&#125;
							&#125;
						);
					&#125;

					// When starting the application this method could be called to try to authenticate the user and if not, present him with a login form
					function reAuthenticate() &#123;
						var authCookie = getCookie( "auth-token" );
						if( authCookie === null ) return Promise.reject( "There's no saved token to authenticate with" );

						var savedToken;
						try &#123;
							savedToken = JSON.parse( authCookie );
						&#125; catch( error ) &#123;
							deleteCookie( "auth-token" );
							return Promise.reject( "The saved token couldn't be parsed" );
						&#125;

						return carbon.authenticateUsing( "TOKEN", savedToken ).catch(
							function( error ) &#123;
								if( error instanceof Errors.IllegalArgumentError || error instanceof HTTP.Errors.UnauthorizedError ) &#123;
									// Invalid token
									deleteCookie( "auth-token" );
									return Promise.reject( "The saved token was invalid" );
								&#125; else return Promise.reject( error );
							&#125;
						);
					&#125;

					// Simple function to retrieve a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function getCookie( name ) &#123;
						var cookies[] = document.cookie.split( ";" );
						for( var i = 0, length = cookies.length; i < length; i++ ) &#123;
							var cookie = cookies[ i ].trim();
							if( cookie.indexOf( name + "=" ) === 0 ) return c.substring( ( name + "=" ).length, cookie.length );
						&#125;
						return null;
					}
					// Simple function to set a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function setCookie( name, value, days ) &#123;
						var expires = "";
						if( days ) &#123;
							var date = new Date();
							date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );
							expires = "; expires=" + date.toUTCString();
						&#125;
						document.cookie = name + "=" + value + expires + "; path=/";
					&#125;
					// Simple function to delete a cookie using vanilla JavaScript. jQuery $.removeCookie method could be used instead
					function deleteCookie( name ) &#123;
						setCookie( name, "", -1 );
					&#125;
				</code></pre>
				
			</tab>
		</tabs>
	</section>
</section>
<section class="mainContent-section">
	<h2>Logging out</h2>
	<p>Clearing the authentication of a user can be done by using the <code>clearAuthentication</code> method of the <code>Auth</code> service. E.g.:</p>
	<tabs>
		<tab title="TypeScript">
			
			<pre><code class="typescript">
				import * as Token from "carbonldp/Auth/Token";

				let carbon:Carbon;

				// ... initialize your Carbon object

				carbon.auth.authenticate( "user@example.com", "SomeOtherPassword" ).then(
					( token:Token.Class ) => &#123;
						console.log( carbon.auth.authenticatedUser ); // User

						carbon.auth.clearAuthentication();

						console.log( carbon.auth.authenticatedUser ); // null
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES2015">
			
			<pre><code class="javascript">
				let carbon;

				// ... initialize your Carbon object


				carbon.auth.authenticate( "user@example.com", "SomeOtherPassword" ).then(
					( token ) => &#123;
						console.log( carbon.auth.authenticatedUser ); // User

						carbon.auth.clearAuthentication();

						console.log( carbon.auth.authenticatedUser ); // null
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES5">
			
			<pre><code class="javascript">
				var carbon;

				// ... initialize your Carbon object


				carbon.auth.authenticate( "user@example.com", "SomeOtherPassword" ).then(
					function( token ) &#123;
						console.log( carbon.auth.authenticatedUser ); // User

						carbon.auth.clearAuthentication();

						console.log( carbon.auth.authenticatedUser ); // null
					&#125;
				);
			</code></pre>
			
		</tab>
	</tabs>
</section>

---
layout: document
title: Object Model
date: 2017-02-08 11:56:53
---


<h1>Object model</h1>

<div class="documentation-steps ui fluid steps">
	<a class="step" href="../getting-started">
		<i class="arrow left icon"></i>
		<div class="content">
			<div class="title">Previous</div>
			<div class="description">Getting Started</div>
		</div>
	</a>
	<div class="active step">
		<div class="content">
			<div class="title">Object Model</div>
		</div>
	</div>
	<a class="step" href="../contexts">
		<i class="arrow right icon"></i>
		<div class="content">
			<div class="title">Next</div>
			<div class="description">Contexts</div>
		</div>
	</a>
</div>

<div class="ui mobile only grid">
	<div class="row">
		<staticContentMenu content="mainContent"></staticContentMenu>
	</div>
</div>

<section class="mainContent-section">
	<h2>Documents</h2>
	<p>
		The main model object handled by Carbon LDP is called a Document. A Document begins as a normal JavaScript object containing any
		number of data attributes (key/value pairs) that you care to define. Typically, a Document represents a data <em>entity</em>
		of a given type (e.g. Person, Project, Product, Invoice). It can have literal datatype properties (e.g. string, date, number) and
		pointers that link to other resources. When a normal JavaScript object is saved to Carbon, it receives a URI that uniquely
		identifies it on a network or the web. That URI can then be used to retrieve the document or to query for specific
		data attributes within it. Of course, queries can also be used to find data across multiple documents.
	</p>
	<section class="mainContent-subSection">
		<h3>URIs as Identifiers</h3>
		<p>
			Using a numerical value as an ID would be prone to collisions. Using a
			<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" rel="noopener" class="outsidelink" target="_blank">UUID</a>
			would solve the collision problem but would make the ID relative to the application (making the ID hard to resolve without knowing
			where it came from). That's why Carbon uses Unique Resource Identifiers (or URIs).
		</p>
		<p>
			URIs are strings that identify resources in a network. Any URL you can think of is also considered a URI, but not all URIs are URLs.
			The main difference is that a URL can change the resource it is pointing at, while URIs can also belong to a resource forever (in which case
			they would be URNs (Unique Resource Names).
		</p>
		<p>
			Basically, <code>URI = URL + URN</code>
		</p>
		<p>
			URIs follow a <a href="https://es.wikipedia.org/wiki/URI_scheme" rel="noopener" class="outsidelink" target="_blank">scheme</a>. Carbon document' URIs, follow the
			<code>http
			</code>
			or <code>https</code> scheme (depending on the platform's configuration).
		</p>
		<p>
			Using URIs as identifiers allow Carbon documents to be <strong>unique</strong>, <strong>resolvable</strong> and <strong>relative to
				the network</strong>.
		</p>
	</section>
	<section class="mainContent-subSection">
		<h3>Properties</h3>
		<p>
			Like any JavaScript object, Carbon documents store data in properties. Properties can be named and contain whatever data values your
			application needs, but there are reserved properties that you should be aware of:
		</p>
		<ul>
			<li><code>id</code>: URI of the document.</li>
			<li>
				<code>slug</code>: Holds the last part of the URI the document is identified with. For example the URI:
				<code>https://example.com/resource-1/</code> would have as a slug <code>resource-1</code>. This property can be useful when
				used as a relative URI when retrieving a child Document from a parent.
			</li>
			<li><code>types</code>: An array holding one or more named classes that describe the type of the document (e.g. Person, Project, Product, Invoice).</li>
			<li><code>created</code>: Date when the document was created.</li>
			<li><code>modified</code>: Date when the document was last modified.</li>
			<li><code>hasMemberRelation</code>: Configures the property that will hold the array of Document members.</li>
			<li><code>isMemberOfRelation</code>: Specifies the property that a member Document will acquire that links back to its container Document.</li>
		</ul>
	</section>
	<section class="mainContent-subSection">
		<h3>Fragments and Named Fragments</h3>
		<p>
			Documents may also contain nested objects. There are two types of nested objects, <code>fragments</code> and <code>named fragments</code>:
		</p>
		
		<pre><code class="javascript">
			var document = &#123;                                        // =================== Document
				id: "https://.../projects/project-x/",
				name: "Project X",
				description: &#123;                                      // -------- Fragment
					format: "html",
					content: "&lt;div&gt;Some content&lt;/div&gt;"
				&#125;,                                                  // -------- End: Fragment
				sow: &#123;                                              // -------- Named Fragment
					id: "#sow",
					signedOn: new Date( "2016-04-03" ),
					clauses: [ // ... ]
				&#125;                                                   // -------- End: Named Fragment
			&#125;;                                                      // =================== End: Document
		</code></pre>
		
		<p>
			Fragments are identified by an ID, just like documents, but the key difference is that their ID is not a URI. Instead
			fragments use IDs of the form <code><strong>_:</strong>RANDOM-STRING</code>. These IDs are local to the document, making it impossible to link
			to fragments from outside of the document.
		</p>
		<p>
			Named fragments on the other hand, are identified by a URI relative to the document. This means, named fragments ARE
			referenceable from outside the document. Their URIs have the form <code>DOCUMENT-URI<strong>#</strong>NAMED-FRAGMENT-SLUG</code>,
			but there are times (as shown in the example) where they can be written relative to the document like
			<code><strong>#</strong>NAMED-FRAGMENT-SLUG</code>.
		</p>
		<div class="ui info icon message">
			<i class="info circle icon"></i>
			<div class="content">
				<div class="header">In a Nutshell</div>
				<p>You can save JavaScript objects with simple key/value pairs (Carbon documents). The value of a given key may be a nested
					object which, in turn, becomes either a <em>fragment</em> or a <em>named fragment</em>.</p>
				<p>
					If it doesn't make sense to reference the inner object outside of the containing document, you can
					save the inner object as a <strong>fragment</strong>. If it is an essential part of the document, but it makes
					sense to reference it from outside, you can create a <strong>named fragment</strong>.
				</p>
			</div>
		</div>
	</section>
</section>
<section class="mainContent-section">
	<h2>Object Types</h2>
	<p>
		Any object stored in Carbon (documents, fragments or named fragments), can be marked with "types". These types can be thought of
		as classes or classifications that describe the type of the object.
	</p>
	<p>You can classify an object as any custom type, but be aware that Carbon also automatically assigns certain system types when an object
		is saved.</p>
	<p>
		The property <code>types</code> will contain an array of types. To determine whether a document represents an object of a given type,
		you can use the document's <code>hasType</code> method:
	</p>
	<tabs>
		<tab title="TypeScript">
			
			<pre><code class="typescript">
				// ... additional imports
				import * as PersistedDocument from "carbonldp/PersistedDocument";

				let project:Project & PersistedDocument.Class;

				// ... project retrieval

				project.types.push( "project", "important-project" );

				console.log( project.hasType( "project" ) ); // true
				console.log( project.types.length !== 2 ); // true, remember Carbon may add more types to the document
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES2015">
			
				<pre><code class="javascript">
					// ... imports
					let project;

					// ... project retrieval

					project.types.push( "project", "important-project" );

					console.log( project.hasType( "project" ) ); // true
					console.log( project.types.length !== 2 ); // true, remember Carbon may add more types to the document
				</code></pre>
				
		</tab>
		<tab title="JavaScript ES5">
			
			<pre><code class="javascript">
				var project;

				// ... project retrieval

				project.types.push( "project", "important-project" );

				console.log( project.hasType( "project" ) ); // true
				console.log( project.types.length !== 2 ); // true, remember Carbon may add more types to the document
			</code></pre>
			
		</tab>
	</tabs>
</section>

<section class="mainContent-section">
	<h2>Conclusion</h2>
	<p>JavaScript objects can be defined with datatype properties, pointers (links) to other resources, fragments (inner-objects),
		and named fragments (externally referenceable inner-objects). These objects, once saved and/or retrieved using the JavaScript
		SDK are Document objects. Each Document object is uniquely identified by a URI, which can be used to link to, retrieve, update,
		or delete the Document.</p>
	<p>Persisted Documents will always be classified with certain system types, but can also be classified with custom
		types (e.g. Person, Project, Product, Invoice).</p>
	<p>Document objects are the main data objects you work with using the JavaScript SDK and the primary means by which you create,
		read, update, and delete data.</p>
</section>

<div class="documentation-steps ui fluid steps">
	<a class="step" href="../getting-started">
		<i class="arrow left icon"></i>
		<div class="content">
			<div class="title">Previous</div>
			<div class="description">Getting Started</div>
		</div>
	</a>
	<div class="active completed step">
		<div class="content">
			<div class="title">Object Model</div>
		</div>
	</div>
	<a class="step" href="../contexts">
		<i class="arrow right icon"></i>
		<div class="content">
			<div class="title">Next</div>
			<div class="description">Contexts</div>
		</div>
	</a>
</div>

---
layout: document
title: Authentication
date: 2017-02-08 11:57:57
---

<h1>Authentication</h1>
					

<div class="documentation-steps ui fluid steps">
	<a class="step" href="../querying">
		<i class="arrow left icon"></i>
		<div class="content">
			<div class="title">Previous</div>
			<div class="description">Querying</div>
		</div>
	</a>
	<div class="active step">
		<!--<i class="payment icon"></i>-->
		<div class="content">
			<div class="title">Authentication</div>
		</div>
	</div>
	<a class="step" href="../authorization">
		<i class="arrow right icon"></i>
		<div class="content">
			<div class="title">Next</div>
			<div class="description">Authorization</div>
		</div>
	</a>
</div>

	<div class="ui mobile only grid">
		<div class="row">
			<staticContentMenu content="mainContent"></staticContentMenu>
		</div>
	</div>
<section class="mainContent-section">
	<h2 class="hidden">Introduction</h2>
	<p>Authenticating an agent was briefly covered in the <a href="../getting-started">Getting Started</a> page. This page we'll provide more
		information about authentication in general.</p>
</section>
<section class="mainContent-section">
	<h2>Logging in</h2>
	<p>As discussed before, an agent can be authenticated on a context by using the <code>authenticate</code> method in the <code>Auth</code> service, e.g.:</p>
	<tabs>
		<tab title="TypeScript">
			
			<pre><code class="typescript">
				// ... additional imports
				import Carbon from "carbonldp/Carbon";
				import * as Token from "carbonldp/Auth/Token";

				let carbon:Carbon;

				// ... platform context creation

				carbon.auth.authenticate( "your@email.com", "YouRP455word" ).then(
					( token:Token.Class ) => &#123;
						console.log( carbon.auth.authenticatedAgent ); // Yourself!
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES2015">
			
			<pre><code class="javascript">
				// ... imports

				let carbon;

				// ... platform context creation

				carbon.auth.authenticate( "your@email.com", "YouRP455word" ).then(
					( token ) => &#123;
						console.log( carbon.auth.authenticatedAgent ); // Yourself!
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES5">
			
			<pre><code class="javascript">
				var carbon;

				// ... platform context creation

				carbon.auth.authenticate( "your@email.com", "YouRP455word" ).then(
					function( token ) &#123;
						console.log( carbon.auth.authenticatedAgent ); // Yourself!
					&#125;
				);
			</code></pre>
			
		</tab>
	</tabs>
	<p>This method will retrieve a <a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">JWT</a> token that represents your authentication with the platform,
		and store it inside of the context you called the method in.</p>
	<p>In the previous example the method was called using the <code>Auth</code> service of the platform context. This means that all requests made by any service of that
		context will use that authentication. Also, any context derived from it will inherit the authentication and use it on all requests unless the authentication is
		overwritten on that context. E.g.:</p>
	<tabs>
		<tab title="TypeScript">
			
			<pre><code class="typescript">
				// ... additional imports
				import Carbon from "carbonldp/Carbon";
				import * as App from "carbonldp/App";
				import * as Token from "carbonldp/Auth/Token";

				let carbon:Carbon;

				// ... platform context creation

				let appContext:App.Context;

				carbon.auth.authenticate( "agent1@example.com", "SomePassword" ).then(
					( token:Token.Class ) => &#123;
						console.log( carbon.auth.authenticatedAgent ); // Agent 1

						return carbon.apps.getContext( "your-app-slug/" );
					&#125;
				).then(
					( _appContext:App.Context.Class ) => &#123;
						appContext = _appContext;

						console.log( appContext.auth.authenticatedAgent ); // Agent 1

						// Override authentication on appContext
						return appContext.auth.authenticate( "agent2@example.com", "SomeOtherPassword" );
					&#125;
				).then(
					( token:Token.Class ) => &#123;
						console.log( carbon.auth.authenticatedAgent ); // Agent 1
						console.log( appContext.auth.authenticatedAgent ); // Agent 2
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES2015">
			
			<pre><code class="javascript">
				// ... imports

				let carbon;

				// ... platform context creation

				let appContext;

				carbon.auth.authenticate( "agent1@example.com", "SomePassword" ).then(
					( token ) => &#123;
						console.log( carbon.auth.authenticatedAgent ); // Agent 1

						return carbon.apps.getContext( "your-app-slug/" );
					&#125;
				).then(
					( _appContext ) => &#123;
						appContext = _appContext;

						console.log( appContext.auth.authenticatedAgent ); // Agent 1

						// Override authentication on appContext
						return appContext.auth.authenticate( "agent2@example.com", "SomeOtherPassword" );
					&#125;
				).then(
					( token ) => &#123;
						console.log( carbon.auth.authenticatedAgent ); // Agent 1
						console.log( appContext.auth.authenticatedAgent ); // Agent 2
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES5">
			
			<pre><code class="javascript">
				var carbon;

				// ... platform context creation

				var appContext:App.Context;

				carbon.auth.authenticate( "agent1@example.com", "SomePassword" ).then(
					function( token ) &#123;
						console.log( carbon.auth.authenticatedAgent ); // Agent 1

						return carbon.apps.getContext( "your-app-slug/" );
					&#125;
				).then(
					function( _appContext ) &#123;
						appContext = _appContext;

						console.log( appContext.auth.authenticatedAgent ); // Agent 1

						// Override authentication on appContext
						return appContext.auth.authenticate( "agent2@example.com", "SomeOtherPassword" );
					&#125;
				).then(
					function( token:Token.Class ) &#123;
						console.log( carbon.auth.authenticatedAgent ); // Agent 1
						console.log( appContext.auth.authenticatedAgent ); // Agent 2
					&#125;
				);
			</code></pre>
			
		</tab>
	</tabs>
	<section class="mainContent-subSection">
		<h3>Keeping authentication across page loads</h3>
		<p>As long as your application can hold a reference of the context you are working on, you'll be able to maintain your user's authentication. But what happens if you
			want to keep your users authenticated across page loads?</p>
		<p>The answer lies on the <a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">JWT</a> the <code>authenticate</code> method returns. This token
			can be saved to later use it to authenticate the agent again with the <code>authenticateUsing</code> method in the <code>Auth</code> service.</p>
		<p>Here's an example on how to do that using cookies, but local storage or any other persistence method could be used:</p>
		<tabs>
			<tab title="TypeScript">
				
				<pre><code class="typescript">
					// ... additional imports
					import * as App from "carbonldp/App";
					import * as Errors from "carbonldp/Errors";
					import * as HTTP from "carbonldp/HTTP";
					import * as Token from "carbonldp/Auth/Token";

					let appContext:App.Context;

					// ... app context retrieval

					function authenticate( username:string, password:string, rememberMe:boolean ):Promise&#60;Token.Class&#62; &#123;
						return appContext.authenticate( username, password ).then(
							( token:Token.Class ) => &#123;
								if( rememberMe ) &#123;
									let cookieValue:string = JSON.stringify( &#123;
										expirationTime: token.expirationTime,
										key: token.key
									&#125; );
									setCookie( "auth-token", cookieValue, 3 );
								&#125;
							&#125;
						);
					&#125;

					// When starting the application this method could be called to try to authenticate the agent and if not present him with a login form
					function reAuthenticate():Promise&#60;Token.Class&#62; &#123;
						let authCookie:string | null = getCookie( "auth-token" );
						if( authCookie === null ) return Promise.reject( "There's no saved token to authenticate with" );

						let savedToken:&#123; expirationTime:Date, key:string &#125;;
						try &#123;
							savedToken = JSON.parse( authCookie );
						&#125; catch( error ) &#123;
							deleteCookie( "auth-token" );
							return Promise.reject( "The saved token couldn't be parsed" );
						&#125;

						return appContext.authenticateUsing( "TOKEN", savedToken ).catch(
							( error ) => &#123;
								if( error instanceof Errors.IllegalArgumentError || error instanceof HTTP.Errors.UnauthorizedError ) &#123;
									// Invalid token
									deleteCookie( "auth-token" );
									return Promise.reject( "The saved token was invalid" );
								&#125; else return Promise.reject( error );
							&#125;
						);
					&#125;

					// Simple function to retrieve a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function getCookie( name:string ):string | null &#123;
						let cookies:string[] = document.cookie.split( ";" );
						for( let cookie in cookies ) &#123;
							cookie = cookie.trim();
							if( cookie.indexOf( `$&#123;name&#125;=` ) === 0 ) return c.substring( `$&#123;name&#125;=`.length, cookie.length );
						&#125;
						return null;
					}
					// Simple function to set a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function setCookie( name:string, value:string, days:number ):void &#123;
						let expires:string = "";
						if( days ) &#123;
							let date:Date = new Date();
							date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );
							expires = `; expires=$&#123; date.toUTCString() &#125;`;
						&#125;
						document.cookie = `$&#123; name &#125;=$&#123; value &#125;$&#123; expires &#125;; path=/`;
					&#125;
					// Simple function to delete a cookie using vanilla JavaScript. jQuery $.removeCookie method could be used instead
					function deleteCookie( name:string ):void &#123;
						setCookie( name, "", -1 );
					&#125;
				</code></pre>
				
			</tab>
			<tab title="JavaScript ES2015">
				
				<pre><code class="javascript">
					// ... imports

					let appContext:App.Context;

					// ... app context retrieval

					function authenticate( username, password, rememberMe ) &#123;
						return appContext.authenticate( username, password ).then(
							( token ) => &#123;
								if( rememberMe ) &#123;
									let cookieValue = JSON.stringify( &#123;
										expirationTime: token.expirationTime,
										key: token.key
									&#125; );
									setCookie( "auth-token", cookieValue, 3 );
								&#125;
							&#125;
						);
					&#125;

					// When starting the application this method could be called to try to authenticate the agent and if not present him with a login form
					function reAuthenticate() &#123;
						let authCookie = getCookie( "auth-token" );
						if( authCookie === null ) return Promise.reject( "There's no saved token to authenticate with" );

						let savedToken;
						try &#123;
							savedToken = JSON.parse( authCookie );
						&#125; catch( error ) &#123;
							deleteCookie( "auth-token" );
							return Promise.reject( "The saved token couldn't be parsed" );
						&#125;

						return appContext.authenticateUsing( "TOKEN", savedToken ).catch(
							( error ) => &#123;
								if( error instanceof Errors.IllegalArgumentError || error instanceof HTTP.Errors.UnauthorizedError ) &#123;
									// Invalid token
									deleteCookie( "auth-token" );
									return Promise.reject( "The saved token was invalid" );
								&#125; else return Promise.reject( error );
							&#125;
						);
					&#125;

					// Simple function to retrieve a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function getCookie( name ) &#123;
						let cookies[] = document.cookie.split( ";" );
						for( let cookie in cookies ) &#123;
							cookie = cookie.trim();
							if( cookie.indexOf( `$&#123;name&#125;=` ) === 0 ) return c.substring( `$&#123;name&#125;=`.length, cookie.length );
						&#125;
						return null;
					}
					// Simple function to set a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function setCookie( name, value, days ) &#123;
						let expires = "";
						if( days ) &#123;
							let date = new Date();
							date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );
							expires = `; expires=$&#123; date.toUTCString() &#125;`;
						&#125;
						document.cookie = `$&#123; name &#125;=$&#123; value &#125;$&#123; expires &#125;; path=/`;
					&#125;
					// Simple function to delete a cookie using vanilla JavaScript. jQuery $.removeCookie method could be used instead
					function deleteCookie( name ) &#123;
						setCookie( name, "", -1 );
					&#125;
				</code></pre>
				
			</tab>
			<tab title="JavaScript ES5">
				
				<pre><code class="javascript">
					var appContext:App.Context;

					// ... app context retrieval

					function authenticate( username, password, rememberMe ) &#123;
						return appContext.authenticate( username, password ).then(
							function( token ) &#123;
								if( rememberMe ) &#123;
									var cookieValue = JSON.stringify( &#123;
										expirationTime: token.expirationTime,
										key: token.key
									&#125; );
									setCookie( "auth-token", cookieValue, 3 );
								&#125;
							&#125;
						);
					&#125;

					// When starting the application this method could be called to try to authenticate the agent and if not present him with a login form
					function reAuthenticate() &#123;
						var authCookie = getCookie( "auth-token" );
						if( authCookie === null ) return Promise.reject( "There's no saved token to authenticate with" );

						var savedToken;
						try &#123;
							savedToken = JSON.parse( authCookie );
						&#125; catch( error ) &#123;
							deleteCookie( "auth-token" );
							return Promise.reject( "The saved token couldn't be parsed" );
						&#125;

						return appContext.authenticateUsing( "TOKEN", savedToken ).catch(
							function( error ) &#123;
								if( error instanceof Errors.IllegalArgumentError || error instanceof HTTP.Errors.UnauthorizedError ) &#123;
									// Invalid token
									deleteCookie( "auth-token" );
									return Promise.reject( "The saved token was invalid" );
								&#125; else return Promise.reject( error );
							&#125;
						);
					&#125;

					// Simple function to retrieve a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function getCookie( name ) &#123;
						var cookies[] = document.cookie.split( ";" );
						for( var i = 0, length = cookies.length; i < length; i++ ) &#123;
							var cookie = cookies[ i ].trim();
							if( cookie.indexOf( name + "=" ) === 0 ) return c.substring( ( name + "=" ).length, cookie.length );
						&#125;
						return null;
					}
					// Simple function to set a cookie using vanilla JavaScript. jQuery $.cookie method could be used instead
					function setCookie( name, value, days ) &#123;
						var expires = "";
						if( days ) &#123;
							var date = new Date();
							date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );
							expires = "; expires=" + date.toUTCString();
						&#125;
						document.cookie = name + "=" + value + expires + "; path=/";
					&#125;
					// Simple function to delete a cookie using vanilla JavaScript. jQuery $.removeCookie method could be used instead
					function deleteCookie( name ) &#123;
						setCookie( name, "", -1 );
					&#125;
				</code></pre>
				
			</tab>
		</tabs>
	</section>
</section>
<section class="mainContent-section">
	<h2>Logging out</h2>
	<p>Clearing the authentication of an agent can be done by using the <code>clearAuthentication</code> method of the <code>Auth</code> service. E.g.:</p>
	<tabs>
		<tab title="TypeScript">
			
			<pre><code class="typescript">
				import * as App from "carbonldp/App";
				import * as Token from "carbonldp/Auth/Token";

				let appContext:App.Context;

				// ... app context retrieval

				appContext.auth.authenticate( "agent@example.com", "SomeOtherPassword" ).then(
					( token:Token.Class ) => &#123;
						console.log( appContext.auth.authenticatedAgent ); // Agent

						appContext.auth.clearAuthentication();

						console.log( appContext.auth.authenticatedAgent ); // null
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES2015">
			
			<pre><code class="javascript">
				let appContext;

				// ... app context retrieval

				appContext.auth.authenticate( "agent@example.com", "SomeOtherPassword" ).then(
					( token ) => &#123;
						console.log( appContext.auth.authenticatedAgent ); // Agent

						appContext.auth.clearAuthentication();

						console.log( appContext.auth.authenticatedAgent ); // null
					&#125;
				);
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES5">
			
			<pre><code class="javascript">
				var appContext;

				// ... app context retrieval

				appContext.auth.authenticate( "agent@example.com", "SomeOtherPassword" ).then(
					function( token ) &#123;
						console.log( appContext.auth.authenticatedAgent ); // Agent

						appContext.auth.clearAuthentication();

						console.log( appContext.auth.authenticatedAgent ); // null
					&#125;
				);
			</code></pre>
			
		</tab>
	</tabs>
</section>

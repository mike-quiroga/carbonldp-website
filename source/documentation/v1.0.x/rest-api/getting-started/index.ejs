---
layout: documentation/document
title: Getting started with the REST API
description: Guide to get you started on how to interact directly with the Carbon LDP platform's REST API.
date: 2017-02-07 19:01:07
version: v1.0.x
---

<div class="ui message">
	<div class="content">
		<p>This guide describes how to use the Carbon LDP REST API. The REST API provides a way for applications to interact with the Carbon platform using HTTP verbs (GET, POST, PUT, DELETE, etc.) and resources identified by URIs.</p>
		<p>The REST API is a lower-level API than the JavaScript SDK and doing things directly with the REST API is generally more tedious than with the JavaScript SDK. However, understanding the REST API provides insight into how the platform works and can be advantageous in certain scenarios.</p>
	</div>
</div>

<div class="ui mobile only grid">
	<div class="row">
		<sidebar-component [mobile]="true" [parentElement]="element" [contentReady]="contentReady" class="sixteen wide mobile only column"></sidebar-component>
	</div>
</div>

<!-- START: Previous knowledge -->
<section class="mainContent-section">
	<h2 class="ui header">Previous knowledge</h2>
	<p>
		In this guide, we'll use different scenarios to go through the REST API methods, detailing the different headers and basic request bodies you can use to interact with the Carbon LDP platform.
		In order to achieve this, examples for requests generated will be included in this documentation. Note that Carbon LDP can handle requests issued using JSON-LD, TriG, Turtle, and RDF XML.
		Nevertheless, since we want to keep this guide simple, the examples provided use only JSON-LD or TriG.</p>

	<p>
		Since this guide focuses on the REST API, you'll need a tool that can help you create and send HTTP requests. We recommend <a href="https://www.getpostman.com/">Postman</a>.
		It's a great tool, it's free, and it's the one we'll be featuring in this guide. But feel free to use the tool you're most comfortable with. <br> <br>
		<img src="/assets/images/postman-logo.png" width="197" height="68">
	</p>
	<p><em><strong>Note:</strong> This guide assumes the typical host and port for a local dev environment, <code>localhost:8083</code>. If your host and port differs, you'll need to make adjustments when using the given examples.</em></p>
	<p>Also, we have created a Postman Collection with all the examples featured in this documentation. Feel free to import it an try all the examples yourself.</p>
	<!-- FIXME: Add Postman Run button to Collection -->

</section>
<!-- END: Previous knowledge -->

<!-- START: Create a Document -->
<section class="mainContent-section">
	<h2 class="ui header">Create a Document</h2>
	<p>
		Carbon LDP stores its data in documents, these represent the basic structure to store any resource in your platform.

	</p>
	<div class="ui icon blue message">
		<i class="info sign icon"></i>
		<div class="content">
			<p><strong>The more you know...</strong></p>
			<p>
				In Carbon LDP a Document is a group of quads that share a common context.
			</p>
		</div>
	</div>
	<p>
		Now, let&apos;s issue a POST request through HTTP in order to create our first basic document.
	</p>
	<section class="mainContent-subSection">
		<h3 class="ui header">Create the POST request</h3>
		<p>Create the following HTTP request to create a platform account.</p>
		<p><span class="ui blue horizontal label">POST</span> <code>http://localhost:8083/</code></p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th><span>HTTP Header</span></th>
					<th>Value</th>
					<th>Required/Optional</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Content-Type</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>Prefer</td>
					<td><span class="nolink">http://www.w3.org/ns/ldp#Container</span>; rel=interaction-model</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>Accept</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Optional (default is <code>text/turtle</code>)</td>
				</tr>
				<tr>
					<td>Slug</td>
					<td>test-document</td>
					<td>Optional</td>
				</tr>
			</tbody>
		</table>
		<tabs>
			<tab title="JSON-LD">

			<pre><code class="json">
				{
					"@context": {
						"c": { "@id": "https://carbonldp.com/ns/v1/platform#" },
						"ex": { "@id": "http://example.org/ns#" },
						"xsd": { "@id": "http://www.w3.org/2001/XMLSchema#" },
						"ex:literalProperty": {
							"@type": "xsd:string"
						},
						"ex:numericalProperty": {
							"@type": "xsd:int"
						}
					},
					"@id": "",
					"@type": [ "c:Document" ],
					"ex:literalProperty": "Example property",
					"ex:numericalProperty": "1"
				}

			</code></pre>

			</tab>
			<tab title="TriG">
				<pre><code>
				@prefix c: &lt;https://carbonldp.com/ns/v1/platform#> .
				@prefix ex: &lt;http://example.org/ns#> .
				@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#> .

				<>{
					<>
						a c:Document ;
						ex:literalProperty "Example property" ;
						ex:numericalProperty "1"^^xsd:int .
				}
				</code></pre>

			</tab>
		</tabs>
	</section>

	<section class="mainContent-subSection">
		<h3 class="ui header">Review the POST request</h3>
		<p>It is important that before issuing this request, you understand all its parts. Next, you'll get more information about each part in the request.</p>
		<div class="ui styled fluid accordion">
			<div class="active title">
				<i class="dropdown icon"></i> Content-Type
			</div>
			<div class="active content">
				<p>
					Since the request method is POST it requires a body. Therefore, the Content-Type HTTP header tells the platform what kind of content to expect in the body of the request. In the examples we use both <a href="https://www.w3.org/TR/json-ld/">JSON-LD</a>
					(<code>application/ld+json</code>) and <a href="https://www.w3.org/TR/trig/">TriG</a> (<code>application/trig</code>) RDF Dataset Languages because they are brief and also support named graphs. Whether you decide to use JSON-LD or the TriG language,
					you'll find that either one provides their own advantages. If you're familiar with JSON objects and JavaScript you might find JSON-LD easier to understand. On the other hand, you might find TriG a bit less verbose and easier to read when it comes to identifying specific
					RDF structures.
				</p>
				<p>Note that Carbon also supports other content types for RDF such as:</p>
				<ul>
					<li>Turtle: <code>text/turtle</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
				</ul>
			</div>
			<div class="active title">
				<i class="dropdown icon"></i> Prefer
			</div>
			<div class="active content">
				<p>
					The <code>Prefer</code> header uses a link relation to specify the <em>interaction model</em> of the target resource. When you issue a request, you are targeting a specific resource where your request will be applied; in this case the root (<code>/</code>) resource.
					By specifying its interaction model, we're defining how we want the root resource to behave.
				</p>
				<p>
					In Carbon LDP resources can behave as either Documents (<code>RDFSource</code>) or Containers. When you're creating a document, you want the target resource to interact as a <code>Container</code>.
					Because we're adding a member resource to the container, we need it to behave like a container as opposed to an <code>RDFSource</code>.
					Carbon supports the following interaction model values for the <code>Prefer</code> header:
				</p>
				<ul>
					<li><code>http://www.w3.org/ns/ldp#Container; rel=interaction-model</code></li>
					<li><code>http://www.w3.org/ns/ldp#RDFSource; rel=interaction-model</code></li>
				</ul>
			</div>
			<div class="active title">
				<i class="dropdown icon"></i> Accept
			</div>
			<div class="active content">
				<p>
					Once your request gets executed by the platform, you might get a response body from the Carbon LDP server. In this case we recommend you define the <code>Accept</code> header to receive this body in a known format; it's simpler to be consistent and use the same format
					used to send the request body. If this header is not defined Carbon LDP will send a response in Turtle (<code>text/turtle</code>) by default. Note that Carbon can send response bodies in other formats, such as:
				</p>
				<ul>
					<li>JSON-LD: <code>application/ld+json</code></li>
					<li>TriG: <code>application/trig</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
					<li>Binary: <code>application/x-binary-rdf</code></li>
					<li>N-Triples: <code>application/n-triples</code></li>
					<li>N3: <code>text/n3</code>, <code>text/rdf+n3</code></li>
					<li>Trix: <code>application/trix</code></li>
					<li>N-Quads: <code>application/n-quads</code>, <code>text/x-nquads</code>, <code>text/nquads</code></li>
					<li>JSON-RDF: <code>application/rdf+json</code></li>

				</ul>
			</div>
			<div class="active title">
				<i class="dropdown icon"></i> Slug
			</div>
			<div class="active content">
				<p>
					The <code>Slug</code> header is intended to give the server a hint about how to mint a new URI for the resource being created. If a slug is not provided, Carbon will generate a random number when minting the URI. In this case, however, we're specifying a preference
					to use <code>test-document</code>. Therefore, if it is available for use, the server will mint the following URI:
				</p>
				<p><code>http://localhost:8083/test-document/</code></p>
				<p>If the URI you're trying to create already exists, the platform will respond with a <strong>409 Conflict</strong> HTTP status code. Keep in mind that URIs are unique identifiers, therefore, the platform will not allow you to create a duplicate resource.</p>
			</div>
			<div class="active title">
				<i class="dropdown icon"></i> Body
			</div>
			<div class="active content">
				<p>The body of the request is a graph of triples written in the RDF syntax matching the Content-Type header.</p>
				<tabs>
					<!-- START: JSON-LD body explanation -->
					<tab title="JSON-LD">

						<p>
							<br>
						<h4>Context object</h4>
						<p>Using the <code>@context</code> annotation we declare short prefix names so that we don't have to repeat long URIs in the objects that follow.</p>
						<p>
							Also, within the context object we define the characteristics that the properties from our request body should follow. In this example we are stating that our document will contain two properties, a <code>string</code> (<code>http://www.w3.org/2001/XMLSchema#string</code>),
							and an <code>int</code> (<code>http://www.w3.org/2001/XMLSchema#int</code>). </p>
						</p>
						<table class="ui celled table">
							<thead>
								<tr>
									<th>Property</th>
									<th>Definition</th>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<pre>"ex:literalProperty"</pre>
									</td>
									<td>
										<pre>{&#10;    "@type": "xsd:string"&#10;}</pre>
									</td>
								</tr>
								<tr>
									<td>
										<pre>"ex:numericalProperty"</pre>
									</td>
									<td>
										<pre>{&#10;    "@type": "xsd:int"&#10;}</pre>
									</td>
								</tr>
							</tbody>
						</table>

						<p>
							Defining the properties this way will let Carbon know how to store the values. Nevertheless, note that the context is only relevant to this specific request, you should be consistent when
							interacting with those properties in different requests in order to prevent type mismatches.
						</p>

						<h4>Document</h4>
						<p>
							Once the context has been defined, we'll now define the value of our Document's properties. All documents should have an <code>@id</code> that uniquely identifies them, as well as a <code>@type</code>. In this case we want the platform to assign the id to the document,
							therefore its value is left as an empty string. However, we are assigning the resource the type Document from the Carbon vocabulary.
						</p>
						<p>Furthermore, here we define the values for the two properties we described within the context.</p>
						<table class="ui celled table">
							<thead>
								<tr>
									<th>Property</th>
									<th>Value</th>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<pre>"ex:literalProperty"</pre>
									</td>
									<td>
										<pre>"Example property"</pre>
									</td>
								</tr>
								<tr>
									<td>
										<pre>"ex:numericalProperty"</pre>
									</td>
									<td>
										<pre>"1"</pre>
									</td>
								</tr>
							</tbody>
						</table>
						<br>

					</tab>
					<!-- END: JSON-LD body explanation -->
					<!-- START: TriG body explanation -->
					<tab title="TriG">
						<br>
						<p>Using Turtle's <code>@prefix</code> directive we declare short prefix names so that we don't have to repeat long URIs in the triples that follow.</p>
						<p>Following is a brief description of each of the required triples that come after the namespace declarations:</p>
						<table class="ui celled table">
							<thead>
								<tr>
									<th>Subject</th>
									<th>Predicate</th>
									<th>Object</th>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<pre>&lt;&gt;</pre>
									</td>
									<td>
										<pre>a</pre>
									</td>
									<td>
										<pre>c:Document</pre>
									</td>
								</tr>
							</tbody>
						</table>

						<p>The subject specifies an empty value relative to the base URI. In Turtle, URIs are written enclosed in '&lt;' and '&gt;' and may be absolute RDF URIs or relative to the current base URI.</p>
						<p>The token 'a' in the predicate position always specifies the RDF type of the resource, which is a short way of writing: <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#type</code></p>

						<p>In the object position, we specify the RDF type as being a Document from the Carbon LDP vocabulary.</p>

						<table class="ui celled table">
							<thead>
								<tr>
									<th>Subject</th>
									<th>Predicate</th>
									<th>Object</th>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<pre>&lt;&gt;</pre>
									</td>
									<td>
										<pre>ex:literalProperty</pre>
									</td>
									<td>
										<pre>"Example property"</pre>
									</td>
								</tr>
							</tbody>
						</table>

						<p>Once more, the subject specifies an empty value relative to the base URI.</p>
						<p>The predicate now represents an example property we are defining for this scenario.</p>
						<p>Finally, the object is a string which represents the value that property holds for its empty subject. Given the way TriG requests are parsed the platform will now the value is of type string.</p>

						<table class="ui celled table">
							<thead>
								<tr>
									<th>Subject</th>
									<th>Predicate</th>
									<th>Object</th>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<pre>&lt;&gt;</pre>
									</td>
									<td>
										<pre>ex:numericalProperty</pre>
									</td>
									<td>
										<pre>"1"^^xsd:int</pre>
									</td>
								</tr>
							</tbody>
						</table>
						<p>In this specific case what changes is the way the value is defined. As you can see, we are trying to store the value as an <code>int</code>, therefore we cast the value using the <code>^^</code> annotation.</p>
						<br>

					</tab>
					<!-- END: TriG body explanation -->
				</tabs>
			</div>
		</div>
	</section>

	<section class="mainContent-subSection">
		<h3 class="ui header">Issue the POST request</h3>
		<p>A successful request will result in HTTP status code <strong>201 Created</strong>.</p>
		<p>The ETag header in the response will confirm the time of creation and the Location header will provide the server minted URI for the new Document resource. For example:</p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th>HTTP Header</th>
					<th>Value</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>ETag</td>
					<td><span>"-1122003795"</span></td>
				</tr>
				<tr>
					<td>Location</td>
					<td><span>http://localhost:8083/test-document/</span></td>
				</tr>
			</tbody>
		</table>
	</section>
</section>
<!-- END: Create a Document -->

<!-- START: Retrieve a Document -->
<section class="mainContent-section">
	<h2 class="ui header">Retrieve a Document</h2>
	<p>You can now examine the newly created resource by issuing a <code>GET</code> request to the URI that was minted for it.</p>
	<section class="mainContent-subSection">
		<h3 class="ui header">Create the GET request</h3>
		<p>Create the following HTTP request to retrieve the Document we created in the previous section.</p>
		<p><span class="ui blue horizontal label">GET</span> <code>http://localhost:8083/test-document/</code></p>
		<div class="ui icon blue message">
			<i class="info sign icon"></i>
			<div class="content">
				<p><strong>The more you know...</strong></p>
				<p>
					Note the trailing slash in the URI. Remember that an RDFSource created in Carbon is automatically also a Container (a feature Carbon manages for you), so the
					server-minted URI always ends with a trailing slash.
				</p>
			</div>
		</div>

		<p>Let's add an <code>Accept</code> header to see the response in either JSON-LD or TriG.</p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th>HTTP Header</th>
					<th>Value</th>
					<th colspan="1">Required/Optional</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Accept</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Optional (default is <code>text/turtle</code>)</td>
				</tr>
			</tbody>
		</table>
	</section>
	<section class="mainContent-subSection">
		<h3 class="ui header">Review the GET request</h3>
		<p>It is important that before issuing this request, you understand all its parts. Next, you'll get more information about each part in the request.</p>
		<div class="ui styled fluid accordion">
			<div class="title">
				<i class="dropdown icon"></i> Accept
			</div>
			<div class="content">
				<p>
					Once your request gets executed by the platform, you might get a response body from the Carbon LDP server. In this case we recommend you define the <code>Accept</code> header to receive this body in a known format; it's simpler to be consistent and use the same format used to send the request body.
					If this header is not defined Carbon LDP will send a response in Turtle (<code>text/turtle</code>) by default. Note that Carbon can send response bodies in other formats, such as:
				</p>
				<ul>
					<li>JSON-LD: <code>application/ld+json</code></li>
					<li>TriG: <code>application/trig</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
					<li>Binary: <code>application/x-binary-rdf</code></li>
					<li>N-Triples: <code>application/n-triples</code></li>
					<li>N3: <code>text/n3</code>, <code>text/rdf+n3</code></li>
					<li>Trix: <code>application/trix</code></li>
					<li>N-Quads: <code>application/n-quads</code>, <code>text/x-nquads</code>, <code>text/nquads</code></li>
					<li>JSON-RDF: <code>application/rdf+json</code></li>

				</ul>
			</div>
		</div>
	</section>
	<section class="mainContent-subSection">
		<h3 class="ui header">Issue the GET request</h3>
		<p>A successful request will result in HTTP status code <strong>200 OK</strong>.</p>
		<p>
			Within the response headers you'll find the ETag which will confirm the last time this resource has been modified. Since we haven't altered the document it should be the same as the one we got when creating the Document.
			Nevertheless, whenever the resource is modified the ETag will be updated.
		</p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th>HTTP Header</th>
					<th>Value</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>ETag</td>
					<td><span>"-1122003795"</span></td>
				</tr>
			</tbody>
		</table>
		<p> This response will also include a body where you will find your Document structure. It should look similar to this:</p>
		<tabs>
			<tab title="JSON-LD">
				<pre><code class="json">
					[
					    {
					        "@graph": [
					            {
					                "@id": "http://localhost:8083/test-document/",
					                "@type": [
					                    "http://www.w3.org/ns/ldp#BasicContainer",
					                    "https://carbonldp.com/ns/v1/platform#Document",
					                    "http://www.w3.org/ns/ldp#RDFSource"
					                ],
					                "http://example.org/ns#literalProperty": [
					                    {
					                        "@value": "Example property"
					                    }
					                ],
					                "http://example.org/ns#numericalProperty": [
					                    {
					                        "@type": "http://www.w3.org/2001/XMLSchema#int",
					                        "@value": "1"
					                    }
					                ],
					                "http://www.w3.org/ns/ldp#hasMemberRelation": [
					                    {
					                        "@id": "http://www.w3.org/ns/ldp#member"
					                    }
					                ],
					                "http://www.w3.org/ns/ldp#insertedContentRelation": [
					                    {
					                        "@id": "http://www.w3.org/ns/ldp#MemberSubject"
					                    }
					                ],
					                "http://www.w3.org/ns/ldp#membershipResource": [
					                    {
					                        "@id": "http://localhost:8083/test-document/"
					                    }
					                ],
					                "https://carbonldp.com/ns/v1/platform#created": [
					                    {
					                        "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
					                        "@value": "2017-11-29T12:28:31.547-06:00"
					                    }
					                ],
					                "https://carbonldp.com/ns/v1/platform#modified": [
					                    {
					                        "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
					                        "@value": "2017-11-29T12:28:31.547-06:00"
					                    }
					                ]
					            }
					        ],
					        "@id": "http://localhost:8083/test-document/"
					    }
					]
				</code></pre>
			</tab>
			<tab title="TriG">
				<pre><code class="html">
				&lt;http://localhost:8083/test-document/> {
					&lt;http://localhost:8083/test-document/> a &lt;http://www.w3.org/ns/ldp#BasicContainer> , &lt;https://carbonldp.com/ns/v1/platform#Document> , &lt;http://www.w3.org/ns/ldp#RDFSource> ;
						&lt;https://carbonldp.com/ns/v1/platform#created> "2017-11-29T12:28:31.547-06:00"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime> ;
						&lt;https://carbonldp.com/ns/v1/platform#modified> "2017-11-29T12:28:31.547-06:00"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime> ;
						&lt;http://www.w3.org/ns/ldp#membershipResource> &lt;http://localhost:8083/test-document/> ;
						&lt;http://www.w3.org/ns/ldp#hasMemberRelation> &lt;http://www.w3.org/ns/ldp#member> ;
						&lt;http://www.w3.org/ns/ldp#insertedContentRelation> &lt;http://www.w3.org/ns/ldp#MemberSubject> ;
						&lt;http://example.org/ns#literalProperty> "Example property" ;
						&lt;http://example.org/ns#numericalProperty> "1"^^&lt;http://www.w3.org/2001/XMLSchema#int> .
				}
				</code></pre>
			</tab>
		</tabs>
		<p>
			While JSON-LD is a great response format to process JavaScript, it can be a tad verbose. Therefore, you may find TriG a bit more useful, specially since it facilitates reading statements in the shape of Subject, Predicate, and Object.
			Note that you can issue the same <code>GET</code> request using any other supported RDF syntax for the <code>Accept</code> header.
		</p>
	</section>
	<section class="mainContent-subSection">
		<h3 class="ui header">Review the GET response</h3>
		<p>
			If you inspect the response body a bit more, you'll realize that your document now contains more properties and types than what you may have originally defined. The platform automatically adds some <em>System Reserved Properties</em> which are <code>c:created</code> and <code>c:modified</code>.
			This properties might be useful when implementing certain functionalities, simply keep in mind that they can't be set or modified by your program. Also, the platform adds other LDP defined properties which are useful when handling relationships between resources.
			They are explained in more detail in the rest of the documentation, but it is good that you are aware of them from the beginning.
		</p>
		<p>
			Furthermore, the platform automatically adds the types <code>ldp:BasicContainer</code> and <code>ldp:RDFSource</code>, which allows for the resource to behave in multiple ways, as we have mentioned before.
			Additionally, if we hadn't defined the <code>c:Document</code> type the platform would have added it automatically, based on the interaction model we used when creating the resource. The fact that we were adding a resource in a Container told Carbon we were creating a Document.
		</p>
	</section>
</section>
<!-- END: Retrieve a Document -->

<!-- START: Modify a Document -->
<section class="mainContent-section">
	<h2 class="ui header">Modify a Document</h2>
	<p>
		You can modify a resource using either a PUT or a PATCH request. Keep in mind that a PUT method replaces the entire resource with your request body. On the other hand, the PATCH method should contain a set of instructions as to how partially modify a resource. Let's analyze both requests
		in more detail modifying the Document we have been using in the previous examples.
	</p>
	<section class="mainContent-subSection">
		<h3 class="ui header">Using a PUT request</h3>
		<p>
			When you use a PUT request to modify a resource you are replacing the one contained in the server with the content of your request body.
			Let's see an example where we want to modify a property and include a new type in the test-document we have been using through this guide with a PUT request. We will modify the <code>ex:literalProperty</code> from "Example property" to "Modified example property", and we will add
			a type <code>ex:Example</code> to our document.
		</p>
		<section>
			<h4 class="ui header">Create the PUT request</h4>
			<p>Create the following HTTP request to modify the test-document we have been working with.</p>
			<p><span class="ui blue horizontal label">PUT</span> <code>http://localhost:8083/test-document/</code></p>
			<table class="ui celled table">
				<thead>
					<tr>
						<th><span>HTTP Header</span></th>
						<th>Value</th>
						<th>Required/Optional</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>Content-Type</td>
						<td>
							application/ld+json<br>
							or<br>
							application/trig<br>
						</td>
						<td>Required</td>
					</tr>
					<tr>
						<td>Prefer</td>
						<td><span class="nolink">http://www.w3.org/ns/ldp#RDFSource</span>; rel=interaction-model</td>
						<td>Required</td>
					</tr>
					<tr>
						<td>If-Match</td>
						<td>"-1122003795" (or latest ETag obtained from the resource)</td>
						<td>Required</td>
					</tr>
					<tr>
						<td>Accept</td>
						<td>
							application/ld+json<br>
							or<br>
							application/trig<br>
						</td>
						<td>Optional</td>
					</tr>
				</tbody>
			</table>
			<tabs>
				<tab title="JSON-LD">
					<pre><code class="json">
							[
							    {
									"@context":{
										"ex": { "@id": "http://example.org/ns#" }
									},
							        "@graph": [
							            {
							                "@id": "http://localhost:8083/test-document/",
							                "@type": [
							                    "http://www.w3.org/ns/ldp#BasicContainer",
							                    "https://carbonldp.com/ns/v1/platform#Document",
							                    "http://www.w3.org/ns/ldp#RDFSource",
												"ex:Example"
							                ],
							                "http://example.org/ns#literalProperty": [
							                    {
													"@value": "Modified example property"
							                    }
							                ],
							                "http://example.org/ns#numericalProperty": [
							                    {
							                        "@type": "http://www.w3.org/2001/XMLSchema#int",
							                        "@value": "1"
							                    }
							                ],
							                "http://www.w3.org/ns/ldp#hasMemberRelation": [
							                    {
							                        "@id": "http://www.w3.org/ns/ldp#member"
							                    }
							                ],
							                "http://www.w3.org/ns/ldp#insertedContentRelation": [
							                    {
							                        "@id": "http://www.w3.org/ns/ldp#MemberSubject"
							                    }
							                ],
							                "http://www.w3.org/ns/ldp#membershipResource": [
							                    {
							                        "@id": "http://localhost:8083/test-document/"
							                    }
							                ],
							                "https://carbonldp.com/ns/v1/platform#created": [
							                    {
							                        "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
							                        "@value": "2017-11-29T12:28:31.547-06:00"
							                    }
							                ],
							                "https://carbonldp.com/ns/v1/platform#modified": [
							                    {
							                        "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
							                        "@value": "2017-11-29T12:28:31.547-06:00"
							                    }
							                ]
							            }
							        ],
							        "@id": "http://localhost:8083/test-document/"
							    }
							]
					</code></pre>
				</tab>
				<tab title="TriG">
					<pre><code class="html">
							@prefix ex:&lt;http://example.org/ns#> .

							&lt;http://localhost:8083/test-document/> {
								&lt;http://localhost:8083/test-document/> a &lt;http://www.w3.org/ns/ldp#BasicContainer> , &lt;https://carbonldp.com/ns/v1/platform#Document> , &lt;http://www.w3.org/ns/ldp#RDFSource>  &lt;ex:Example;
									&lt;https://carbonldp.com/ns/v1/platform#created> "2017-11-29T12:28:31.547-06:00"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime> ;
									&lt;https://carbonldp.com/ns/v1/platform#modified> "2017-11-29T12:28:31.547-06:00"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime> ;
									&lt;http://www.w3.org/ns/ldp#membershipResource> &lt;http://localhost:8083/test-document/> ;
									&lt;http://www.w3.org/ns/ldp#hasMemberRelation> &lt;http://www.w3.org/ns/ldp#member> ;
									&lt;http://www.w3.org/ns/ldp#insertedContentRelation> &lt;http://www.w3.org/ns/ldp#MemberSubject> ;
									&lt;http://example.org/ns#literalProperty> "Modified example property" ;
									&lt;http://example.org/ns#numericalProperty> "1"^^&lt;http://www.w3.org/2001/XMLSchema#int> .
							}
					</code></pre>
				</tab>
			</tabs>
		</section>
		<section>
			<h4 class="ui header">Review the PUT request</h4>
			<p>It is important that before issuing this request, you understand all its parts. Next, you'll get more information about each part in the request.</p>
			<div class="ui styled fluid accordion">
				<div class="title">
					<i class="dropdown icon"></i> Content-Type
				</div>
				<div class="content">
					<p>Since the request method is PUT it requires a body. Therefore, the Content-Type HTTP header tells the platform what kind of content to expect in the body of the request. In the examples we use both <a href="https://www.w3.org/TR/json-ld/">JSON-LD</a> (<code>application/ld+json</code>) and
						<a href="https://www.w3.org/TR/trig/">TriG</a> (<code>application/trig</code>) RDF Dataset Languages because they are brief and also support named graphs. Whether you decide to use JSON-LD or the TriG language, you'll find that either one provides their own advantages.
						If you're familiar with JSON objects and JavaScript you might find JSON-LD easier to understand. On the other hand, you might find TriG a bit less verbose and easier to read when it comes to identifying specific RDF structures.<br><br>
						Note that Carbon also supports other content types for RDF such as:</p>
					<ul>
						<li>Turtle: <code>text/turtle</code></li>
						<li>RDF XML: <code>application/rdf+xml</code></li>
					</ul>
				</div>
				<div class="title">
					<i class="dropdown icon"></i> Prefer
				</div>
				<div class="content">
					<p>
						The <code>Prefer</code> header uses a link relation to specify the <em>interaction model</em> of the target resource. When you issue a request, you are targeting a specific resource where your request will be applied; in this case the test-document (<code>test-document/</code>)
						resource we previously created and read. By specifying its interaction model, we're defining how we want this resource to behave. <br><br>

						In Carbon LDP resources can behave as either Documents (<code>RDFSource</code>) or Containers. When you're editing a document, you want the target resource to behave as a <code>RDFSource</code>.
						Because we're editing properties in a resource, we need it to behave like a Document (<code>RDFSource</code>) as opposed to a <code>Container</code>.

						Carbon supports the following interaction model values for the <code>Prefer</code> header:
					</p>
					<ul>
						<li><code>http://www.w3.org/ns/ldp#Container; rel=interaction-model</code></li>
						<li><code>http://www.w3.org/ns/ldp#RDFSource; rel=interaction-model</code></li>
					</ul>
				</div>
				<div class="title">
					<i class="dropdown icon"></i> If-Match
				</div>
				<div class="content">
					<p>
						The <code>If-Match</code> header allows you to ensure that the data you are modifying is accurate before changing anything within your document; this is necessary to maintain data consistency. Your application might not be the
						only one modifying the resource, so the platform needs a way to assure that no data is overridden when executing the PUT request. To achieve this Carbon uses ETags, therefore it only allows changes that won't override each other.
						In case the ETags do not match, you should first execute a GET request, update your PUT request with the new body and ETag, and retry it.
					</p>
				</div>
				<div class="title">
					<i class="dropdown icon"></i> Accept
				</div>
				<div class="content">
					<p>
						Once your request gets executed by the platform, you might get a response body from the Carbon LDP server. In this case we recommend you define the <code>Accept</code> header to receive this body in a known format; it's simpler to be consistent and use the same format used to send the request body.
						If this header is not defined Carbon LDP will send a response in Turtle (<code>text/turtle</code>) by default. Note that Carbon can send response bodies in other formats, such as:
					</p>
					<ul>
						<li>JSON-LD: <code>application/ld+json</code></li>
						<li>TriG: <code>application/trig</code></li>
						<li>RDF XML: <code>application/rdf+xml</code></li>
						<li>Binary: <code>application/x-binary-rdf</code></li>
						<li>N-Triples: <code>application/n-triples</code></li>
						<li>N3: <code>text/n3</code>, <code>text/rdf+n3</code></li>
						<li>Trix: <code>application/trix</code></li>
						<li>N-Quads: <code>application/n-quads</code>, <code>text/x-nquads</code>, <code>text/nquads</code></li>
						<li>JSON-RDF: <code>application/rdf+json</code></li>

					</ul>
				</div>
				<div class="title">
					<i class="dropdown icon"></i> Body
				</div>
				<div class="content">
					<p>
						The body of the request is a graph of triples written in the RDF syntax matching the Content-Type header. It should contain the same System Reserved Properties as the resource currently stored in the platform, along with whichever properties you want to modify.
						If these are not contained within the body of your request, or they have changed the platform will send a <strong>412 Precondition Failed</strong> response. Alongside, a response body will warn you about trying to modify System Reserved Properties.
						So, to ensure you have the latest data in your request body, you can execute a GET request before issuing your PUT request.
					</p>
				</div>
			</div>
			<section class="mainContent-subSection">
				<h4 class="ui header">Issue the PUT request</h4>
				<p>A successful request will result in HTTP status code <strong>204 No Content</strong>.</p>
				<p>Within the response headers you'll find the new ETag that got generate from the modification you just made.</p>

				<table class="ui celled table">
					<thead>
						<tr>
							<th><span>HTTP Header</span></th>
							<th>Value</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>ETag</td>
							<td>"1126128674"</td>
						</tr>
					</tbody>
				</table>
			</section>
		</section>
	</section>

	<section class="mainContent-subSection">
		<h3 class="ui header">Using a PATCH request</h3>
		<!-- FIXME: Pending to write-->
	</section>
</section>
<!-- END: Modify a Document -->

<section class="mainContent-section">
	<h2>Delete a Document</h2>
	<!-- FIXME: Pending to write -->
</section>
<section class="mainContent-section">
	<h2 class="ui header">Conclusion</h2>
	<p>This guide described how to build an example application using the Carbon LDP REST API. Normally, developers will prefer use of the Carbon LDP Workbench (GUI) and the JavaScript SDK, which together simplify the process of building an app. Still, all functions of the platform can be accessed through the REST API and those developers who understand the REST API may find it advantageous to use in some cases.</p>
</section>

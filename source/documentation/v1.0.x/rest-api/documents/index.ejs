---
layout: documentation/document
title: Documents
description: Guide to get you started on working with Carbon LDP's documents through the REST API.
date: 2017-02-07 19:01:07
notDocumented: false
version: v1.0.x
---

<div class="ui message">
	<div class="content">
		<p>In this guide, we'll use different scenarios to go through the REST API methods (detailing the different headers and basic request bodies) you can use to interact with the Carbon LDP platform when creating or modifying Documents.</p>
		<p>We have created a <a href="https://www.getpostman.com/collections/307f7898c630698ce5a8">Postman Collection</a> with all the examples featured in this documentation. The examples for this section are contained in the <strong>documents</strong> folder.</p>
	</div>
</div>

<div class="ui mobile only grid">
	<div class="row">
		<sidebar-component [mobile]="true" [parentElement]="element" [contentReady]="contentReady" class="sixteen wide mobile only column"></sidebar-component>
	</div>
</div>

<!-- START: What is a Carbon LDP Document? -->
<section class="mainContent-section">
	<h2 class="ui header">What is a Carbon LDP Document?</h2>
	<p>
		Carbon LDP stores its data in documents, these represent the basic structure to store any resource in your platform. Typically, a document represents a data <em>entity</em> of a given type (e.g. Person, Project, Product, Invoice). It can have any number of literal
		datatype <strong>properties</strong> (e.g. string, date, number) and links to other resources. Finally, within Carbon, documents are uniquely identified by <strong>Uniform Resource Identifiers</strong> (URIs).
	</p>
	<div class="ui info icon message">
		<i class="info circle icon"></i>
		<div class="content">
			<div class="header">The more you know...</div>
			<p>
				In Carbon LDP a Document is a group of quads that share a common context.
			</p>
		</div>
	</div>
	<p>To get a better insight into the basic parts that conform a Carbon LDP Document, see <a href="../object-and-interaction-models/#document-model">Document model</a>.</p>
	<p>Now let's see how you can interact with documents in Carbon through REST methods.</p>
</section>
<!-- END: What is a Carbon LDP Document? -->

<!-- START: Create a Document -->
<section class="mainContent-section">
	<h2 class="ui header">Create a Document</h2>
	<p>
		Issue a POST request through HTTP in order to create our first basic document.
	</p>
	<section class="mainContent-subSection">
		<h3 class="ui header">Create the POST request</h3>
		<p>Create the following HTTP request to create a test document.</p>
		<p><span class="ui blue horizontal label">POST</span> <code>http://localhost:8083/</code></p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th><span>HTTP Header</span></th>
					<th>Value</th>
					<th>Required/Optional</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Content-Type</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>Prefer</td>
					<td><span class="nolink">http://www.w3.org/ns/ldp#Container</span>; rel=interaction-model</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>Accept</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Optional (default is <code>text/turtle</code>)</td>
				</tr>
				<tr>
					<td>Slug</td>
					<td>test-document</td>
					<td>Optional</td>
				</tr>
			</tbody>
		</table>
		<tabs>
			<tab title="JSON-LD">

			<pre><code class="json">
				{
					"@context": {
						"c": { "@id": "https://carbonldp.com/ns/v1/platform#" },
						"ex": { "@id": "http://example.org/ns#" },
						"xsd": { "@id": "http://www.w3.org/2001/XMLSchema#" },
						"ex:literalProperty": {
							"@type": "xsd:string"
						},
						"ex:numericalProperty": {
							"@type": "xsd:int"
						}
					},
					"@id": "",
					"@type": [ "c:Document" ],
					"ex:literalProperty": "Example property",
					"ex:numericalProperty": "1"
				}

			</code></pre>

			</tab>
			<tab title="TriG">
				<pre><code>
				@prefix c: &lt;https://carbonldp.com/ns/v1/platform#> .
				@prefix ex: &lt;http://example.org/ns#> .
				@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#> .

				<>{
					<>
						a c:Document ;
						ex:literalProperty "Example property" ;
						ex:numericalProperty "1"^^xsd:int .
				}
				</code></pre>

			</tab>
		</tabs>
	</section>

	<section class="mainContent-subSection">
		<h3 class="ui header">Review the POST request</h3>
		<p>It is important that before issuing this request, you understand all its parts. Next, you'll get more information about each part in the request.</p>
		<div class="ui styled fluid accordion">
			<div class="active title">
				<i class="dropdown icon"></i> Content-Type
			</div>
			<div class="active content">
				<p>
					Since the request method is POST it requires a body. Therefore, the Content-Type HTTP header tells the platform what kind of content to expect in the body of the request. In the examples we use either <a href="https://www.w3.org/TR/json-ld/">JSON-LD</a>
					(<code>application/ld+json</code>) or <a href="https://www.w3.org/TR/trig/">TriG</a> (<code>application/trig</code>) RDF Dataset Languages because they are brief and also support named graphs. Whether you decide to use JSON-LD or the TriG language,
					you'll find that each one provides their own advantages. If you're familiar with JSON objects and JavaScript you might find JSON-LD easier to understand. On the other hand, you might find TriG a bit less verbose and easier to read when it comes to identifying specific
					RDF structures.
				</p>
				<p>Note that Carbon also supports other content types for RDF such as:</p>
				<ul>
					<li>Turtle: <code>text/turtle</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
				</ul>
			</div>
			<div class="active title">
				<i class="dropdown icon"></i> Prefer
			</div>
			<div class="active content">
				<p>
					The <code>Prefer</code> header uses a link relation to specify the <em>interaction model</em> of the target resource. When you issue a request, you are targeting a specific resource where your request will be applied; in this case the root (<code>/</code>) resource.
					By specifying its interaction model, we're defining how we want the root resource to behave.
				</p>
				<p>
					In Carbon LDP resources can behave as either Documents (<code>RDFSource</code>) or Containers. When you're creating a document, you want the target resource to interact as a <code>Container</code>.
					Because we're adding a member resource to the container, we need it to behave like a container as opposed to an <code>RDFSource</code>.
					Carbon supports the following interaction model values for the <code>Prefer</code> header:
				</p>
				<ul>
					<li><code>http://www.w3.org/ns/ldp#Container; rel=interaction-model</code></li>
					<li><code>http://www.w3.org/ns/ldp#RDFSource; rel=interaction-model</code></li>
				</ul>
			</div>
			<div class="active title">
				<i class="dropdown icon"></i> Accept
			</div>
			<div class="active content">
				<p>
					Once your request gets executed by the platform, you might get a response body from the Carbon LDP server. In this case we recommend you define the <code>Accept</code> header to receive this body in a known format; it's simpler to be consistent and use the same format
					used to send the request body. If this header is not defined Carbon LDP will send a response in Turtle (<code>text/turtle</code>) by default. Note that Carbon can send response bodies in other formats, such as:
				</p>
				<ul>
					<li>JSON-LD: <code>application/ld+json</code></li>
					<li>TriG: <code>application/trig</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
					<li>Binary: <code>application/x-binary-rdf</code></li>
					<li>N-Triples: <code>application/n-triples</code></li>
					<li>N3: <code>text/n3</code>, <code>text/rdf+n3</code></li>
					<li>Trix: <code>application/trix</code></li>
					<li>N-Quads: <code>application/n-quads</code>, <code>text/x-nquads</code>, <code>text/nquads</code></li>
					<li>JSON-RDF: <code>application/rdf+json</code></li>

				</ul>
			</div>
			<div class="active title">
				<i class="dropdown icon"></i> Slug
			</div>
			<div class="active content">
				<p>
					The <code>Slug</code> header is intended to give the server a hint about how to mint a new URI for the resource being created. If a slug is not provided, Carbon will generate a random number when minting the URI. In this case, however, we're specifying a preference
					to use <code>test-document</code>. Therefore, if it is available for use, the server will mint the following URI:
				</p>
				<p><code>http://localhost:8083/test-document/</code></p>
				<p>If the URI you're trying to create already exists, the platform will respond with a <strong>409 Conflict</strong> HTTP status code. Keep in mind that URIs are unique identifiers, therefore, the platform will not allow you to create a duplicate resource.</p>
			</div>
			<div class="active title">
				<i class="dropdown icon"></i> Body
			</div>
			<div class="active content">
				<p>The body of the request is a graph of triples written in the RDF syntax matching the Content-Type header.</p>
				<p>If there is anything from the request body you don't understand you can check the <a href="https://www.w3.org/TR/json-ld/">JSON-LD</a> or <a href="https://www.w3.org/TR/trig/">TriG</a> W3C specifications, which Carbon LDP complies to.</p>
				<!--
				<tabs>
				<tab title="JSON-LD">

					<p>
						<br>
					<h4>Context object</h4>
					<p>Using the <code>@context</code> annotation we declare short prefix names so that we don't have to repeat long URIs in the objects that follow.</p>
					<p>
						Also, within the context object we define the characteristics that the properties from our request body should follow. In this example we are stating that our document will contain two properties, a <code>string</code> (<code>http://www.w3.org/2001/XMLSchema#string</code>),
						and an <code>int</code> (<code>http://www.w3.org/2001/XMLSchema#int</code>). </p>
					</p>
					<table class="ui celled table">
						<thead>
							<tr>
								<th>Property</th>
								<th>Definition</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>
									<pre>"ex:literalProperty"</pre>
								</td>
								<td>
									<pre>{&#10;    "@type": "xsd:string"&#10;}</pre>
								</td>
							</tr>
							<tr>
								<td>
									<pre>"ex:numericalProperty"</pre>
								</td>
								<td>
									<pre>{&#10;    "@type": "xsd:int"&#10;}</pre>
								</td>
							</tr>
						</tbody>
					</table>

					<p>
						Defining the properties this way will let Carbon know how to store the values. Nevertheless, note that the context is only relevant to this specific request, you should be consistent when
						interacting with those properties in different requests in order to prevent type mismatches.
					</p>

					<h4>Document</h4>
					<p>
						Once the context has been defined, we'll now define the value of our Document's properties. All documents should have an <code>@id</code> that uniquely identifies them, as well as a <code>@type</code>. In this case we want the platform to assign the id to the document,
						therefore its value is left as an empty string. However, we are assigning the resource the type Document from the Carbon vocabulary.
					</p>
					<p>Furthermore, here we define the values for the two properties we described within the context.</p>
					<table class="ui celled table">
						<thead>
							<tr>
								<th>Property</th>
								<th>Value</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>
									<pre>"ex:literalProperty"</pre>
								</td>
								<td>
									<pre>"Example property"</pre>
								</td>
							</tr>
							<tr>
								<td>
									<pre>"ex:numericalProperty"</pre>
								</td>
								<td>
									<pre>"1"</pre>
								</td>
							</tr>
						</tbody>
					</table>
					<br>

				</tab>
				<tab title="TriG">
					<br>
					<p>Using Turtle's <code>@prefix</code> directive we declare short prefix names so that we don't have to repeat long URIs in the triples that follow.</p>
					<p>Following is a brief description of each of the required triples that come after the namespace declarations:</p>
					<table class="ui celled table">
						<thead>
							<tr>
								<th>Subject</th>
								<th>Predicate</th>
								<th>Object</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>
									<pre>&lt;&gt;</pre>
								</td>
								<td>
									<pre>a</pre>
								</td>
								<td>
									<pre>c:Document</pre>
								</td>
							</tr>
						</tbody>
					</table>

					<p>The subject specifies an empty value relative to the base URI. In Turtle, URIs are written enclosed in '&lt;' and '&gt;' and may be absolute RDF URIs or relative to the current base URI.</p>
					<p>The token 'a' in the predicate position always specifies the RDF type of the resource, which is a short way of writing: <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#type</code></p>

					<p>In the object position, we specify the RDF type as being a Document from the Carbon LDP vocabulary.</p>

					<table class="ui celled table">
						<thead>
							<tr>
								<th>Subject</th>
								<th>Predicate</th>
								<th>Object</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>
									<pre>&lt;&gt;</pre>
								</td>
								<td>
									<pre>ex:literalProperty</pre>
								</td>
								<td>
									<pre>"Example property"</pre>
								</td>
							</tr>
						</tbody>
					</table>

					<p>Once more, the subject specifies an empty value relative to the base URI.</p>
					<p>The predicate now represents an example property we are defining for this scenario.</p>
					<p>Finally, the object is a string which represents the value that property holds for its empty subject. Given the way TriG requests are parsed the platform will now the value is of type string.</p>

					<table class="ui celled table">
						<thead>
							<tr>
								<th>Subject</th>
								<th>Predicate</th>
								<th>Object</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>
									<pre>&lt;&gt;</pre>
								</td>
								<td>
									<pre>ex:numericalProperty</pre>
								</td>
								<td>
									<pre>"1"^^xsd:int</pre>
								</td>
							</tr>
						</tbody>
					</table>
					<p>In this specific case what changes is the way the value is defined. As you can see, we are trying to store the value as an <code>int</code>, therefore we cast the value using the <code>^^</code> annotation.</p>
					<br>

				</tab>
				</tabs>
				-->
			</div>
		</div>
	</section>

	<section class="mainContent-subSection">
		<h3 class="ui header">Issue the POST request</h3>
		<p>A successful request will result in HTTP status code <strong>201 Created</strong>.</p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th>HTTP Header</th>
					<th>Value</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>ETag</td>
					<td><span>"-1122003795"</span></td>
				</tr>
				<tr>
					<td>Location</td>
					<td><span>http://localhost:8083/test-document/</span></td>
				</tr>
			</tbody>
		</table>
		<p>As part of the response headers:
		<ul>
			<li>The ETag header will confirm the time of the document's creation.</li>
			<li>The Location header will provide the server minted URI for the new document.</li>
		</ul>
	</section>
</section>
<!-- END: Create a Document -->

<!-- START: Retrieve a Document -->
<section class="mainContent-section">
	<h2 class="ui header">Retrieve a Document</h2>
	<p>You can now examine the newly created resource by issuing a <code>GET</code> request to the URI that was minted for it.</p>
	<section class="mainContent-subSection">
		<h3 class="ui header">Create the GET request</h3>
		<p>Create the following HTTP request to retrieve the Document we created in the previous section.</p>
		<p><span class="ui blue horizontal label">GET</span> <code>http://localhost:8083/test-document/</code></p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th>HTTP Header</th>
					<th>Value</th>
					<th colspan="1">Required/Optional</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Accept</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Optional (default is <code>text/turtle</code>)</td>
				</tr>
			</tbody>
		</table>

		<div class="ui info icon message">
			<i class="info circle icon"></i>
			<div class="content">
				<div class="header">The more you know...</div>
				<p>
					Note the trailing slash in the URI. Remember that an RDFSource created in Carbon is automatically also a Container (a feature Carbon manages for you), so the
					server-minted URI always ends with a trailing slash.
				</p>
			</div>
		</div>

	</section>
	<section class="mainContent-subSection">
		<h3 class="ui header">Review the GET request</h3>
		<p>It is important that before issuing this request, you understand all its parts. Next, you'll get more information about each part in the request.</p>
		<div class="ui styled fluid accordion">
			<div class="title">
				<i class="dropdown icon"></i> Accept
			</div>
			<div class="content">
				<p>
					Once your request gets executed by the platform, you might get a response body from the Carbon LDP server. In this case we recommend you define the <code>Accept</code> header to receive this body in a known format; it's simpler to be consistent and use the same format used to send the request body.
					If this header is not defined Carbon LDP will send a response in Turtle (<code>text/turtle</code>) by default. Note that Carbon can send response bodies in other formats, such as:
				</p>
				<ul>
					<li>JSON-LD: <code>application/ld+json</code></li>
					<li>TriG: <code>application/trig</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
					<li>Binary: <code>application/x-binary-rdf</code></li>
					<li>N-Triples: <code>application/n-triples</code></li>
					<li>N3: <code>text/n3</code>, <code>text/rdf+n3</code></li>
					<li>Trix: <code>application/trix</code></li>
					<li>N-Quads: <code>application/n-quads</code>, <code>text/x-nquads</code>, <code>text/nquads</code></li>
					<li>JSON-RDF: <code>application/rdf+json</code></li>

				</ul>
			</div>
		</div>
	</section>
	<section class="mainContent-subSection">
		<h3 class="ui header">Issue the GET request</h3>
		<p>A successful request will result in HTTP status code <strong>200 OK</strong>.</p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th>HTTP Header</th>
					<th>Value</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>ETag</td>
					<td><span>"-1122003795"</span></td>
				</tr>
			</tbody>
		</table>
		<tabs>
			<tab title="JSON-LD">
				<pre><code class="json">
					[
					    {
					        "@graph": [
					            {
					                "@id": "http://localhost:8083/test-document/",
					                "@type": [
					                    "http://www.w3.org/ns/ldp#BasicContainer",
					                    "https://carbonldp.com/ns/v1/platform#Document",
					                    "http://www.w3.org/ns/ldp#RDFSource"
					                ],
					                "http://example.org/ns#literalProperty": [
					                    {
					                        "@value": "Example property"
					                    }
					                ],
					                "http://example.org/ns#numericalProperty": [
					                    {
					                        "@type": "http://www.w3.org/2001/XMLSchema#int",
					                        "@value": "1"
					                    }
					                ],
					                "http://www.w3.org/ns/ldp#hasMemberRelation": [
					                    {
					                        "@id": "http://www.w3.org/ns/ldp#member"
					                    }
					                ],
					                "http://www.w3.org/ns/ldp#insertedContentRelation": [
					                    {
					                        "@id": "http://www.w3.org/ns/ldp#MemberSubject"
					                    }
					                ],
					                "http://www.w3.org/ns/ldp#membershipResource": [
					                    {
					                        "@id": "http://localhost:8083/test-document/"
					                    }
					                ],
					                "https://carbonldp.com/ns/v1/platform#created": [
					                    {
					                        "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
					                        "@value": "2017-11-29T12:28:31.547-06:00"
					                    }
					                ],
					                "https://carbonldp.com/ns/v1/platform#modified": [
					                    {
					                        "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
					                        "@value": "2017-11-29T12:28:31.547-06:00"
					                    }
					                ]
					            }
					        ],
					        "@id": "http://localhost:8083/test-document/"
					    }
					]
				</code></pre>
			</tab>
			<tab title="TriG">
				<pre><code class="html">
				&lt;http://localhost:8083/test-document/> {
					&lt;http://localhost:8083/test-document/> a &lt;http://www.w3.org/ns/ldp#BasicContainer> , &lt;https://carbonldp.com/ns/v1/platform#Document> , &lt;http://www.w3.org/ns/ldp#RDFSource> ;
						&lt;https://carbonldp.com/ns/v1/platform#created> "2017-11-29T12:28:31.547-06:00"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime> ;
						&lt;https://carbonldp.com/ns/v1/platform#modified> "2017-11-29T12:28:31.547-06:00"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime> ;
						&lt;http://www.w3.org/ns/ldp#membershipResource> &lt;http://localhost:8083/test-document/> ;
						&lt;http://www.w3.org/ns/ldp#hasMemberRelation> &lt;http://www.w3.org/ns/ldp#member> ;
						&lt;http://www.w3.org/ns/ldp#insertedContentRelation> &lt;http://www.w3.org/ns/ldp#MemberSubject> ;
						&lt;http://example.org/ns#literalProperty> "Example property" ;
						&lt;http://example.org/ns#numericalProperty> "1"^^&lt;http://www.w3.org/2001/XMLSchema#int> .
				}
				</code></pre>
			</tab>
		</tabs>

		<p> As part of the response headers:</p>
		<ul>
			<li>The ETag will confirm the last time the document resource has been modified.</li>

		</ul>
		<p>Since we haven't altered the document it should be the same as the one we got when creating the Document. Nevertheless, whenever the resource is modified the ETag will be updated.</p>

		<p>The response will also include a body where you will find your Document structure in the format you set on the Accept header.</p>
		<p>
			While JSON-LD is a great response format to process JavaScript, it can be a tad verbose. Therefore, you may find TriG a bit more useful, specially since it facilitates reading statements in the shape of Subject, Predicate, and Object.
			Note that you can issue the same <code>GET</code> request using any other supported RDF syntax for the <code>Accept</code> header.
		</p>
	</section>
	<section class="mainContent-subSection">
		<h3 class="ui header">Review the GET response</h3>
		<p>
			If you inspect the response body a bit more, you'll realize that your document now contains more properties and types than what you may have originally defined.</p>

		<p>
			The platform automatically adds some properties to your document, some of them are <em>System Reserved Properties</em>, for example <code>c:created</code> or <code>c:modified</code>. While these properties might be useful when implementing certain functionalities, keep in mind that they can't be set or modified
			by your program.
		</p>
		<p>
			Furthermore, the platform automatically adds certain types to the resources it creates, for example <code>ldp:BasicContainer</code> and <code>ldp:RDFSource</code>. This allows for resources to behave in multiple ways, as we have mentioned before.
			Additionally, if we hadn't defined the <code>c:Document</code> type the platform would have added it automatically in this case, based on the interaction model we used when creating the resource.
		</p>
	</section>
</section>
<!-- END: Retrieve a Document -->

<!-- START: Modify a Document -->
<section class="mainContent-section">
	<h2 class="ui header">Modify a Document</h2>
	<p>
		You can modify a resource using either a PUT or a PATCH request. Keep in mind that a PUT method replaces the entire resource with your request body. On the other hand, the PATCH method should contain a set of instructions on how to partially modify your resource. Let's analyze both
		requests in more detail modifying the Document we have been using in the previous examples.
	</p>
	<section class="mainContent-subSection">
		<h3 class="ui header">Using a PUT request</h3>
		<p>
			When you use a PUT request to modify a resource you are replacing the one contained in the server with the content of your request body.
			Let's see an example where we want to modify a property and include a new type in the test-document we created and read in the previous examples with a PUT request.
		</p>
		<p>
			We will modify the <code>ex:literalProperty</code> value from "Example property" to "Modified example property",
			and we will add a type <code>ex:PUTExample</code> to our document.
		</p>

		<h4>Create the PUT request</h4>
		<p>Create the following HTTP request to modify the test-document we have been working with.</p>
		<p><span class="ui blue horizontal label">PUT</span> <code>http://localhost:8083/test-document/</code></p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th><span>HTTP Header</span></th>
					<th>Value</th>
					<th>Required/Optional</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Content-Type</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>Prefer</td>
					<td><span class="nolink">http://www.w3.org/ns/ldp#RDFSource</span>; rel=interaction-model</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>If-Match</td>
					<td>"-1122003795" (latest ETag obtained from the resource)</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>Accept</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Optional</td>
				</tr>
			</tbody>
		</table>
		<tabs>
			<tab title="JSON-LD">
					<pre><code class="json">
							[
							    {
									"@context":{
										"ex": { "@id": "http://example.org/ns#" }
									},
							        "@graph": [
							            {
							                "@id": "http://localhost:8083/test-document/",
							                "@type": [
							                    "http://www.w3.org/ns/ldp#BasicContainer",
							                    "https://carbonldp.com/ns/v1/platform#Document",
							                    "http://www.w3.org/ns/ldp#RDFSource",
												"ex:PUTExample"
							                ],
							                "http://example.org/ns#literalProperty": [
							                    {
													"@value": "Modified example property"
							                    }
							                ],
							                "http://example.org/ns#numericalProperty": [
							                    {
							                        "@type": "http://www.w3.org/2001/XMLSchema#int",
							                        "@value": "1"
							                    }
							                ],
							                "http://www.w3.org/ns/ldp#hasMemberRelation": [
							                    {
							                        "@id": "http://www.w3.org/ns/ldp#member"
							                    }
							                ],
							                "http://www.w3.org/ns/ldp#insertedContentRelation": [
							                    {
							                        "@id": "http://www.w3.org/ns/ldp#MemberSubject"
							                    }
							                ],
							                "http://www.w3.org/ns/ldp#membershipResource": [
							                    {
							                        "@id": "http://localhost:8083/test-document/"
							                    }
							                ],
							                "https://carbonldp.com/ns/v1/platform#created": [
							                    {
							                        "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
							                        "@value": "2017-11-29T12:28:31.547-06:00"
							                    }
							                ],
							                "https://carbonldp.com/ns/v1/platform#modified": [
							                    {
							                        "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
							                        "@value": "2017-11-29T12:28:31.547-06:00"
							                    }
							                ]
							            }
							        ],
							        "@id": "http://localhost:8083/test-document/"
							    }
							]
					</code></pre>
			</tab>
			<tab title="TriG">
					<pre><code class="html">
							@prefix ex:&lt;http://example.org/ns#> .

							&lt;http://localhost:8083/test-document/> {
								&lt;http://localhost:8083/test-document/> a &lt;http://www.w3.org/ns/ldp#BasicContainer> , &lt;https://carbonldp.com/ns/v1/platform#Document> , &lt;http://www.w3.org/ns/ldp#RDFSource>  &lt;ex:PUTExample;
									&lt;https://carbonldp.com/ns/v1/platform#created> "2017-11-29T12:28:31.547-06:00"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime> ;
									&lt;https://carbonldp.com/ns/v1/platform#modified> "2017-11-29T12:28:31.547-06:00"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime> ;
									&lt;http://www.w3.org/ns/ldp#membershipResource> &lt;http://localhost:8083/test-document/> ;
									&lt;http://www.w3.org/ns/ldp#hasMemberRelation> &lt;http://www.w3.org/ns/ldp#member> ;
									&lt;http://www.w3.org/ns/ldp#insertedContentRelation> &lt;http://www.w3.org/ns/ldp#MemberSubject> ;
									&lt;http://example.org/ns#literalProperty> "Modified example property" ;
									&lt;http://example.org/ns#numericalProperty> "1"^^&lt;http://www.w3.org/2001/XMLSchema#int> .
							}
					</code></pre>
			</tab>
		</tabs>

		<div class="ui info icon message">
			<i class="info circle icon"></i>
			<div class="content">
				<div class="header">The more you know...</div>
				<p>
					Note the trailing slash in the URI. Remember that an RDFSource created in Carbon is automatically also a Container (a feature Carbon manages for you), so the
					server-minted URI always ends with a trailing slash.
				</p>
			</div>
		</div>
		<h4>Review the PUT request</h4>
		<p>It is important that before issuing this request, you understand all its parts. Next, you'll get more information about each part in the request.</p>
		<div class="ui styled fluid accordion">
			<div class="title">
				<i class="dropdown icon"></i> Content-Type
			</div>
			<div class="content">
				<p>Since the request method is PUT it requires a body. Therefore, the Content-Type HTTP header tells the platform what kind of content to expect in the body of the request. In the examples we use both <a href="https://www.w3.org/TR/json-ld/">JSON-LD</a> (<code>application/ld+json</code>) and
					<a href="https://www.w3.org/TR/trig/">TriG</a> (<code>application/trig</code>) RDF Dataset Languages because they are brief and also support named graphs. Whether you decide to use JSON-LD or the TriG language, you'll find that either one provides their own advantages.
					If you're familiar with JSON objects and JavaScript you might find JSON-LD easier to understand. On the other hand, you might find TriG a bit less verbose and easier to read when it comes to identifying specific RDF structures.<br><br>
					Note that Carbon also supports other content types for RDF such as:</p>
				<ul>
					<li>Turtle: <code>text/turtle</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
				</ul>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> Prefer
			</div>
			<div class="content">
				<p>
					The <code>Prefer</code> header uses a link relation to specify the <em>interaction model</em> of the target resource. When you issue a request, you are targeting a specific resource where your request will be applied; in this case the test-document (<code>test-document/</code>)
					resource we previously created and read. By specifying its interaction model, we're defining how we want this resource to behave. <br><br>

					In Carbon LDP resources can behave as either Documents (<code>RDFSource</code>) or Containers. When you're editing a document, you want the target resource to behave as a <code>RDFSource</code>.
					Because we're editing properties in a resource, we need it to behave like a Document (<code>RDFSource</code>) as opposed to a <code>Container</code>.

					Carbon supports the following interaction model values for the <code>Prefer</code> header:
				</p>
				<ul>
					<li><code>http://www.w3.org/ns/ldp#Container; rel=interaction-model</code></li>
					<li><code>http://www.w3.org/ns/ldp#RDFSource; rel=interaction-model</code></li>
				</ul>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> If-Match
			</div>
			<div class="content">
				<p>
					The <code>If-Match</code> header allows you to ensure that the data you are modifying is accurate before changing anything within your document; this is necessary to maintain data consistency. Your application might not be the
					only one modifying the resource, so the platform needs a way to assure that no data is overridden when executing a request that modifies the resource.
				</p>
				<p>
					To achieve this Carbon uses ETags, therefore it only allows changes that won't override each other.
					In case the ETags do not match, you should first execute a GET request, update your request with the new body and ETag, and retry it.
				</p>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> Accept
			</div>
			<div class="content">
				<p>
					Once your request gets executed by the platform, you might get a response body from the Carbon LDP server. In this case we recommend you define the <code>Accept</code> header to receive this body in a known format; it's simpler to be consistent and use the same format used to send the request body.
					If this header is not defined Carbon LDP will send a response in Turtle (<code>text/turtle</code>) by default. Note that Carbon can send response bodies in other formats, such as:
				</p>
				<ul>
					<li>JSON-LD: <code>application/ld+json</code></li>
					<li>TriG: <code>application/trig</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
					<li>Binary: <code>application/x-binary-rdf</code></li>
					<li>N-Triples: <code>application/n-triples</code></li>
					<li>N3: <code>text/n3</code>, <code>text/rdf+n3</code></li>
					<li>Trix: <code>application/trix</code></li>
					<li>N-Quads: <code>application/n-quads</code>, <code>text/x-nquads</code>, <code>text/nquads</code></li>
					<li>JSON-RDF: <code>application/rdf+json</code></li>

				</ul>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> Body
			</div>
			<div class="content">
				<p>The body of the request is a graph of triples written in the RDF syntax matching the Content-Type header.</p>
				<p>
					If there is anything from the request body you don't understand you can check the <a href="https://www.w3.org/TR/json-ld/">JSON-LD</a> or <a href="https://www.w3.org/TR/trig/">TriG</a>
					W3C specifications, which Carbon LDP complies to.
				</p>
				<p>
					Since we are issuing a PUT request, it should contain the same properties as the resource currently stored in the platform, along with whichever properties you want to modify. Please note that this includes <em>System Reserved Properties.</em>
					If these are not contained within the body of your request, or their values differ from the ones on the request body, the platform will send a <strong>412 Precondition Failed</strong> response. Alongside, a response body will warn you about trying to modify
					System Reserved Properties, here you can get an idea of which properties were not maintained in your request.
				</p>
				<p>Therefore, to ensure you have the latest data in your request body, you can execute a GET request before issuing your PUT request.</p>
			</div>
		</div>
		<h4>Issue the PUT request</h4>
		<p>A successful request will result in HTTP status code <strong>204 No Content</strong>.</p>

		<table class="ui celled table">
			<thead>
				<tr>
					<th><span>HTTP Header</span></th>
					<th>Value</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>ETag</td>
					<td>"1126128674"</td>
				</tr>
			</tbody>
		</table>
		<p>As part of the response headers:
		<ul>
			<li>The ETag header will confirm the time of the document's modification.</li>
		</ul>
		<p>Since we just modified the document, the ETag should be different from the one we used in the If-Match header, as a part of our request.</p>
	</section>
	<section class="mainContent-subSection">
		<h3 class="ui header">Using a PATCH request</h3>
		<p>
			If you want to modify a resource using a PATCH request, you are changing only certain parts of it. In order to execute this request the server needs to know which document you are modifying, the changes you are applying, and to which properties. To achieve this, Carbon LDP has
			implemented some methods from the W3C <a href="https://www.w3.org/TR/ldpatch/">LD PATCH</a> specification. Specifically, the methods implemented by the platform include the <code>Add</code>, <code>Delete</code>, and <code>UpdateList</code>. Let's see an example where we want to
			modify a property and include a new type in the test-document we created and read in the previous examples with a PATCH request.
		</p>
		<p>
			We will modify the <code>ex:literalProperty</code> value from "Example property" to "Modified example property", and we will add a type <code>ex:PATCHExample</code> to our document. In order to do this we need to implement the <a href="https://www.w3.org/TR/ldpatch/#Delete-statement">Delete</a> and
			<a href="https://www.w3.org/TR/ldpatch/#Add-statement">Add</a> methods from the W3C specification to which Carbon LDP complies.
		</p>
		<h4>Create the PATCH request</h4>
		<p>Create the following HTTP request to modify the test-document we have been working with.</p>
		<p><span class="ui blue horizontal label">PATCH</span> <code>http://localhost:8083/test-document/</code></p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th><span>HTTP Header</span></th>
					<th>Value</th>
					<th>Required/Optional</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Content-Type</td>
					<td>text/ldpatch</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>Prefer</td>
					<td><span class="nolink">http://www.w3.org/ns/ldp#RDFSource</span>; rel=interaction-model</td>
					<td>Required</td>
				</tr>
				<tr>
					<td>If-Match</td>
					<td>"1159301007" (latest ETag obtained from the resource)</td>
					<td>Optional</td>
				</tr>
				<tr>
					<td>Accept</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig<br>
					</td>
					<td>Optional</td>
				</tr>
			</tbody>
		</table>
		<pre><code class="html">
				@prefix rdf:&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
				@prefix ex:&lt;http://example.org/ns#> .

				Delete {
					&lt;http://localhost:8083/test-document/>
						ex:literalProperty "Example property" .
				} .

				Add {
					&lt;http://localhost:8083/test-document/>
						ex:literalProperty "Modified example property" ;
						rdf:type ex:PATCHExample .
				} .
				</code></pre>
		<h4>Review the PATCH request</h4>
		<p>It is important that before issuing this request, you understand all its parts. Next, you'll get more information about each part in the request.</p>
		<div class="ui styled fluid accordion">
			<div class="title">
				<i class="dropdown icon"></i> Content-Type
			</div>
			<div class="content">
				<p>Since the request method is PATCH it requires a body that details the modifications that will take place in the resource you are targeting. To achieve that, the Content-Type HTTP header tells the platform what kind of content to expect in the body of the request.</p>
				<p>In this case, the header is <code>text/ldpatch</code> which is a format developed by the W3C which allows you to describe a set of instructions on how you want to modify certain properties from a resource.</p>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> Prefer
			</div>
			<div class="content">
				<p>
					The <code>Prefer</code> header uses a link relation to specify the <em>interaction model</em> of the target resource. When you issue a request, you are targeting a specific resource where your request will be applied; in this case the test-document (<code>test-document/</code>)
					resource we previously created and read. By specifying its interaction model, we're defining how we want this resource to behave. <br><br>

					In Carbon LDP resources can behave as either Documents (<code>RDFSource</code>) or Containers. When you're editing a document, you want the target resource to behave as a <code>RDFSource</code>.
					Because we're editing properties in a resource, we need it to behave like a Document (<code>RDFSource</code>) as opposed to a <code>Container</code>.

					Carbon supports the following interaction model values for the <code>Prefer</code> header:
				</p>
				<ul>
					<li><code>http://www.w3.org/ns/ldp#Container; rel=interaction-model</code></li>
					<li><code>http://www.w3.org/ns/ldp#RDFSource; rel=interaction-model</code></li>
				</ul>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> If-Match
			</div>
			<div class="content">
				<p>
					The <code>If-Match</code> header allows you to ensure that the data you are modifying is accurate before changing anything within your document; this is necessary to maintain data consistency. Your application might not be the
					only one modifying the resource, so the platform needs a way to assure that no data is overridden when executing a request that modifies the resource.
				</p>
				<p>
					To achieve this Carbon uses ETags, therefore it only allows changes that won't override each other.
					In case the ETags do not match, you should first execute a GET request, update your request with the new ETag, and retry it.
				</p>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> Accept
			</div>
			<div class="content">
				<p>
					Once your request gets executed by the platform, you might get a response body from the Carbon LDP server. In this case we recommend you define the <code>Accept</code> header to receive this body in a known format; it's simpler to be consistent and use the formats
					that are recommended through this documentation like JSON-LD (<code>application/ld+json</code>) or TriG (<code>application/trig</code>).
					If this header is not defined Carbon LDP will send a response in Turtle (<code>text/turtle</code>) by default. Note that Carbon can send response bodies in other formats, such as:
				</p>
				<ul>
					<li>JSON-LD: <code>application/ld+json</code></li>
					<li>TriG: <code>application/trig</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
					<li>Binary: <code>application/x-binary-rdf</code></li>
					<li>N-Triples: <code>application/n-triples</code></li>
					<li>N3: <code>text/n3</code>, <code>text/rdf+n3</code></li>
					<li>Trix: <code>application/trix</code></li>
					<li>N-Quads: <code>application/n-quads</code>, <code>text/x-nquads</code>, <code>text/nquads</code></li>
					<li>JSON-RDF: <code>application/rdf+json</code></li>

				</ul>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> Body
			</div>
			<div class="content">
				<p>
					The body of a PATCH request includes the statements being modified, as well as the method through which they are being modified. In this case, since we said we wanted to modify the value of the <code>ex:literalProperty</code>, we need to initially delete the current
					property, and then, include a new property with the new value we want to set. Also, note how you can alter multiple properties with the same method at once.
				</p>
				<p>If there is anything from the request body you don't understand you can check the <a href="https://www.w3.org/TR/ldpatch/">LD Patch</a> W3C specification, which Carbon LDP complies to.</p>

			</div>
		</div>
		<h4>Issue the PATCH request</h4>
		<p>A successful request will result in HTTP status code <strong>204 No Content</strong>.</p>

		<table class="ui celled table">
			<thead>
				<tr>
					<th><span>HTTP Header</span></th>
					<th>Value</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>ETag</td>
					<td>"2035489282"</td>
				</tr>
			</tbody>
		</table>
		<p>As part of the response headers:
		<ul>
			<li>The ETag header will confirm the time of the document's modification.</li>
		</ul>
		<p>Since we just modified the document, the ETag should be different from the one we used in the If-Match header, as a part of our request.</p>
	</section>
</section>
<!-- END: Modify a Document -->

<section class="mainContent-section">
	<h2>Delete a Document</h2>
	<p>Issue a DELETE request through HTTP in order to delete the sample document we have been working with.</p>
	<section class="mainContent-subSection">
		<h3>Create the DELETE request</h3>
		<p>Create the following HTTP request to delete the test document we have been working with.</p>
		<p><span class="ui blue horizontal label">DELETE</span> <code>http://localhost:8083/test-document/</code></p>
		<table class="ui celled table">
			<thead>
				<tr>
					<th><span>HTTP Header</span></th>
					<th>Value</th>
					<th>Required/Optional</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Prefer</td>
					<td><span class="nolink">http://www.w3.org/ns/ldp#RDFSource</span>; rel=interaction-model</td>
					<td>Optional (default is <code>http://www.w3.org/ns/ldp#RDFSource</code>)</td>
				</tr>
				<tr>
					<td>If-Match</td>
					<td>"2035489282" (latest ETag obtained from the resource)</td>
					<td>Optional</td>
				</tr>
				<tr>
					<td>Accept</td>
					<td>
						application/ld+json<br>
						or<br>
						application/trig
					</td>
					<td>Optional</td>
				</tr>
			</tbody>
		</table>
	</section>
	<section class="mainContent-subSection">
		<h3>Review the DELETE request</h3>
		<p>It is important that before issuing this request, you understand all its parts. Next, you'll get more information about each part in the request.</p>
		<div class="ui styled fluid accordion">
			<div class="title">
				<i class="dropdown icon"></i> Prefer
			</div>
			<div class="content">
				<p>
					The <code>Prefer</code> header uses a link relation to specify the <em>interaction model</em> of the target resource. When you issue a request, you are targeting a specific resource where your request will be applied; in this case the test-document
					(<code>test-document/</code>) resource we previously worked with. By specifying its interaction model, we're defining how we want this resource to behave.
				</p>
				<p>
					In Carbon LDP resources can behave as either Documents (<code>RDFSource</code>) or Containers. When you're deleting a document, you want the target resource to interact as a <code>RDFSource</code>.
					Because we're deleting a document, we need it to behave like a Document (<code>RDFSource</code>) as opposed to an <code>Container</code>.
					Carbon supports the following interaction model values for the <code>Prefer</code> header:
				</p>
				<ul>
					<li><code>http://www.w3.org/ns/ldp#Container; rel=interaction-model</code></li>
					<li><code>http://www.w3.org/ns/ldp#RDFSource; rel=interaction-model</code></li>
				</ul>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> If-Match
			</div>
			<div class="content">
				<p>
					The <code>If-Match</code> header allows you to ensure that the data you are modifying is accurate before changing anything within your document; this is necessary to maintain data consistency. Your application might not be the
					only one modifying the resource, so the platform needs a way to assure that no data is overridden when executing a request that modifies the resource.
				</p>
				<p>
					To achieve this Carbon uses ETags, therefore it only allows changes that won't override each other.
					In case the ETags do not match, you should first execute a GET request, update your request with the new body and ETag, and retry it.
				</p>
			</div>
			<div class="title">
				<i class="dropdown icon"></i> Accept
			</div>
			<div class="content">
				<p>
					Once your request gets executed by the platform, you might get a response body from the Carbon LDP server. In this case we recommend you define the <code>Accept</code> header to receive this body in a known format; it's simpler to be consistent and use a single format
					through all your requests. If this header is not defined Carbon LDP will send a response in Turtle (<code>text/turtle</code>) by default. Note that Carbon can send response bodies in other formats, such as:
				</p>
				<ul>
					<li>JSON-LD: <code>application/ld+json</code></li>
					<li>TriG: <code>application/trig</code></li>
					<li>RDF XML: <code>application/rdf+xml</code></li>
					<li>Binary: <code>application/x-binary-rdf</code></li>
					<li>N-Triples: <code>application/n-triples</code></li>
					<li>N3: <code>text/n3</code>, <code>text/rdf+n3</code></li>
					<li>Trix: <code>application/trix</code></li>
					<li>N-Quads: <code>application/n-quads</code>, <code>text/x-nquads</code>, <code>text/nquads</code></li>
					<li>JSON-RDF: <code>application/rdf+json</code></li>

				</ul>
			</div>
		</div>
	</section>
	<section class="mainContent-subSection">
		<h3>Issue the DELETE request</h3>
		<p>A successful request will result in HTTP status code <strong>204 No Content</strong>.</p>

		<table class="ui celled table">
			<thead>
				<tr>
					<th><span>HTTP Header</span></th>
					<th>Value</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Date</td>
					<td>Fri, 08 Dec 2017 18:33:17 GMT</td>
				</tr>
			</tbody>
		</table>
		<p>As part of the response headers:
		<ul>
			<li>The Date header will confirm the time when the document got removed from your platform.</li>
		</ul>
		<p>Note that your document and every reference to it, will be removed from the platform. Carbon LDP takes care of this, so that with a single request you can completely eliminate a resource from your platform.</p>
		<div class="ui info icon message">
			<i class="info circle icon"></i>
			<div class="content">
				<div class="header">The more you know...</div>
				<p>
					When you delete a document that is referenced in one or many lists, Carbon deletes the entries that hold that reference, not just the reference.
				</p>
			</div>
		</div>
	</section>
</section>
<section class="mainContent-section">
	<h2 class="ui header">Conclusion</h2>
	<p>
		This guide described how to interact with Carbon LDP documents via the REST API. Normally, developers will prefer use of the Carbon LDP Workbench (GUI) and an SDK, which together simplify the process of building and working with the platform. Still, all functions of the platform can be
		accessed through the REST API and those developers who understand the REST API may find it advantageous to use in some cases.
	</p>
</section>

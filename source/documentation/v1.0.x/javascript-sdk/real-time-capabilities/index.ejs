---
layout: documentation/document
title: Real-time capabilities
description: Discover the capabilities of a real time linked data platform.
date: 2017-29-09 11:57:18
version: v1.0.x
---
<div class="documentation-steps ui fluid steps">
	<a class="step" href="../access-points">
		<i class="arrow left icon"></i>
		<div class="content">
			<div class="title">Previous</div>
			<div class="description">Access Points</div>
		</div>
	</a>
	<div class="active step">
		<div class="content">
			<div class="title">Real-Time capabilities</div>
		</div>
	</div>
</div>

<div class="ui mobile only grid">
	<div class="row">
		<staticContentMenu content="mainContent"></staticContentMenu>
	</div>
</div>

<!-- START: Introduction -->
<section class="mainContent-section">
	<h2 class="hidden">Introduction</h2>
	<p>
		In the current world, accessibility to information is crucial; so crucial that not only accessibility to information
		matters, but rather the time in which that information is available. The time to access to new information is a key factor that
		many companies heavily rely on, and to address this issue, Carbon provides real-time capabilities in its platform.
	</p>
</section>
<!-- END: Introduction -->


<!-- START: Configure message broker -->
<div class="ui warning icon message">
	<i class="warning icon"></i>
	<div class="content">
		<p>
			To use real-time features, the platform instance must have access to a message broker.<br>
			If you haven't configured your instance to do so, read this guide to learn how to do it:<br>
			<!-- TODO change link to configure a message broker -->
			<a target="_blank" href="../../platform/configuration">Configuring the platform</a>
		</p>
	</div>
</div>
<!-- END: Configure message broker -->


<!-- START: Subscribing -->
<section class="mainContent-section">
	<h2 class="hidden">Subscribing</h2>
	<p>
		The real-time capabilities that carbon provides come in the form of subscriptions to events that occur within the platform.
		To start subscribing to events with the SDK, first and foremost, you need to know three things: the <strong>subject</strong> (document) you are interested in,
		the <strong>event</strong> you're going to subscribe to, and the <strong>action</strong> that will be triggered after the event takes place.
		<br>
		Once you have identified the three of them, you can start writing a subscription with the SDK.
	</p>
	<p>
		Let's start this guide by using an example to subscribe to: Imagine that you have a company and you want to know whenever a client is added or removed from your company
		so you can perform some adjustments to the company's budget; you have defined the following structure in your platform instance:
	</p>
	<div class="ui list">
		<div class="item">
			<i class="file icon"></i>
			<div class="content">
				<div class="header">/</div>
				<div class="description">Your platform root, usually is (http://you-platform-domain:8080/)</div>
				<div class="list">
					<div class="item">
						<i class="file icon"></i>
						<div class="content">
							<div class="header">clients/</div>
							<div class="description">The document that contains the clients</div>
							<div class="list">
								<div class="item">
									<i class="file icon"></i>
									<div class="content">
										<div class="header">client-1/</div>
										<div class="description">Document defining client 1 properties</div>
									</div>
								</div>
								<div class="item">
									<i class="file icon"></i>
									<div class="content">
										<div class="header">client-2/</div>
										<div class="description">Document defining client 2 properties</div>
									</div>
								</div>
								<div class="item">
									<i class="file icon"></i>
									<div class="content">
										<div class="header">client-n.../</div>
										<div class="description">And so on...</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="item">
						<i class="file icon"></i>
						<div class="content">
							<div class="header">department/</div>
							<div class="description">Document that contains the departments of your company</div>
						</div>
					</div>
					<div class="item">
						<i class="file icon"></i>
						<div class="content">
							<div class="header">etc...</div>
							<div class="description">Other aspects your company has</div>
						</div>
					</div>

				</div>
			</div>
		</div>
	</div>
	<p>
		With this in mind we can start to define our subscription.
	</p>


	<!-- START: The Subject -->
	<section class="mainContent-subSection">
		<h3 class="hidden">The Subject (document)</h3>
		<p>
			First, we need to identify the subject we want to subscribe to. In this example, we want to know whenever a client is added or removed from your clients;
			because the <span class="highlight">clients/</span> document contains all the clients as <span class="highlight">children/</span>, this will be the subject
			we want to subscribe to.
			<br>
			Now that we've identified the subject we want to subscribe to (<span class="highlight">clients/</span>), we need to retrieve that document.
		</p>


		<!-- START: Code example defining the subject -->
		<tabs>
			<tab title="TypeScript">

				<pre><code class="typescript">
					import * as PersistedDocument from "carbonldp/PersistedDocument";
					import * as Response from "carbonldp/HTTP/Response";

					let carbon:Carbon;

					// ... initialize your Carbon object

					carbon.documents.get( "clients/" ).then(
						( [ clientsDocument, response ]:[ PersistedDocument.Class, HTTP.Response.Class ] ) => &#123;
							// We've retrieved the subject
							console.log( clientsDocument );
						&#125;
					).catch( console.error );
				</code></pre>

			</tab>
			<tab title="JavaScript ES2015">

				<pre><code class="javascript">
					let carbon;

					// ... initialize your Carbon object

					carbon.documents.get( "clients/" ).then(
						( [ clientsDocument, response ] ) => &#123;
							// We've retrieved the subject
							console.log( clientsDocument );
						&#125;
					).catch( console.error );
				</code></pre>

			</tab>
			<tab title="JavaScript ES5">

				<pre><code class="javascript">
					var carbon;

					// ... initialize your Carbon object

					carbon.documents.get( "clients/" ).then(
						( result ) => &#123;
							var clientsDocument = result[ 0 ];
							var response = result[ 1 ];

							// We've retrieved the subject
							console.log( clientsDocument );
						&#125;
					).catch( console.error );
				</code></pre>
			</tab>
		</tabs>
		<!-- END: Code example defining the subject -->

		<p>
			And that's how we retrieve the subject we want to subscribe to; now we need to identify the events to which we can subscribe.
		</p>
	</section>
	<!-- END: The Subject -->


	<!-- START: The Event -->
	<section class="mainContent-subSection">
		<h3 class="hidden">The Event</h3>
		<p>
			Now that we've identified and retrieved the subject, we have to specify the event we want to subscribe to.<br>
			To specify the event, Carbon provides a series of predefined events that it can subscribe to; such events are defined
			in the <span class="highlight">Carbon/Messaging/Event</span> file.<br>
			The list of events we can subscribe to are the following:
		</p>
		<table class="ui collapsed striped compact small celled table">
			<thead>
				<tr>
					<th colspan="2">Event</th>
					<th>Return type</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="collapsing">
						<i class="lightning icon"></i>
					</td>
					<td>

						<code>CHILD_CREATED</code><br>
						<span>Whenever a subject's child is created</span>
					</td>
					<td>
						<code>ChildCreated.Class</code><br><br>
						<span>With properties:</span><br>
						- <code>target</code>:<code>Pointer.Class</code><br>
						- <code>details</code>:<code>DocumentCreatedDetails.Class</code>
					</td>
				</tr>
				<tr>
					<td class="collapsing">
						<i class="lightning icon"></i>
					</td>
					<td>
						<code>ACCESS_POINT_CREATED</code><br>
						<span>Whenever an <a target="_blank" href="../access-points#creating-an-access-point">access point</a> is created</span>
					</td>
					<td>
						<code>AccessPointCreated.Class</code><br>
						<span>With properties:</span><br>
						- <code>target</code>:<code>Pointer.Class</code><br>
						- <code>details</code>:<code>DocumentCreatedDetails.Class</code>
					</td>
				</tr>
				<tr>
					<td class="collapsing">
						<i class="lightning icon"></i>
					</td>
					<td>
						<code>DOCUMENT_CREATED</code><br>
						<span>Whenever a new document is created</span>
					</td>
					<td>
						<code>DocumentCreated.Class</code><br><br>
						<span>With properties:</span><br>
						- <code>target</code>:<code>Pointer.Class</code><br>
						- <code>details</code>:<code>DocumentCreatedDetails.Class</code>
					</td>
				</tr>
				<tr>
					<td class="collapsing">
						<i class="lightning icon"></i>
					</td>
					<td>
						<code>DOCUMENT_MODIFIED</code><br>
						<span>Whenever any of a document's properties are modified</span>
					</td>
					<td>
						<code>DocumentModified.Class</code><br><br>
						<span>With property:</span><br>
						- <code>target</code>:<code>Pointer.Class</code>
					</td>
				</tr>
				<tr>
					<td class="collapsing">
						<i class="lightning icon"></i>
					</td>
					<td>
						<code>DOCUMENT_DELETED</code><br>
						<span>Whenever an existing document is deleted</span>
					</td>
					<td>
						<code>DocumentDeleted.Class</code><br>
						<span>With property:</span><br>
						- <code>target</code>:<code>Pointer.Class</code>
					</td>
				</tr>
				<tr>
					<td class="collapsing">
						<i class="lightning icon"></i>
					</td>
					<td>
						<code>MEMBER_ADDED</code><br>
						<span>Whenever a new <a href="../access-points#membership-relation" target="_blank">member</a> is added to a document</span>
					</td>
					<td>
						<code>MemberAdded.Class</code><br><br>
						<span>With properties:</span><br>
						- <code>target</code>:<code>Pointer.Class</code><br>
						- <code>details</code>:<code>MemberAddedDetails.Class</code>
					</td>
				</tr>
				<tr>
					<td class="collapsing">
						<i class="lightning icon"></i>
					</td>
					<td>
						<code>MEMBER_REMOVED</code><br>
						<span>Whenever an existing <a href="../access-points#membership-relation" target="_blank">member</a> is removed from a document</span>
					</td>
					<td>
						<code>MemberRemoved.Class</code><br><br>
						<span>With properties:</span><br>
						- <code>target</code>:<code>Pointer.Class</code><br>
						- <code>details</code>:<code>MemberRemovedDetails.Class</code>
					</td>
				</tr>
			</tbody>
		</table>
		<p>
			Each one of these methods returns a special object of the type of the event that was triggered, and as you can see, every one of
			them has a property called <code>target</code>, which is basically a <code>pointer</code> to the document originating the event.
			This property is added to each of the return types because they inherit it from the <code>Carbon/Messaging/Message.Class</code>
		</p>
		<p>
			But as you may have noticed, some methods also return a property called <code>details</code>. This property gives you more information
			of the documents produced by the event, for example, in the cases in which the <code>details</code> properties are of the type
			<code>DocumentCreatedDetails.Class</code>, it returns an array of pointers of the documents that were created.
			Something similar occurs with the <code>MemberAddedDetails.Class</code> and <code>MemberDeletedDetails.Class</code>, with the difference
			that they return the pointers of the members that were added/removed.
		</p>
		<p>
			To subscribe to any of these events, the <span class="highlight">documents</span> service as well as the
			<span class="highlight">PersistedDocument.Class</span> provide three main methods to handle event subscriptions.
			Such methods are the following:
		</p>

		<div class="ui bulleted list">
			<div class="item">
				<div class="content">
					<div class="header"><code>on</code></div>
					<div class="description">Activates a subscription to an event</div>
				</div>
			</div>
			<div class="item">
				<div class="content">
					<div class="header"><code>off</code></div>
					<div class="description">Deactivates the subscription of an event</div>
				</div>
			</div>
			<div class="item">
				<div class="content">
					<div class="header"><code>one</code></div>
					<div class="description">A one time only subscription, once it triggers the specified action it will not trigger it again</div>
				</div>
			</div>
		</div>

		<p>
			Along with the above methods, we can make use of the following ones to avoid having to import the <code>Carbon/Messaging/Event</code> enum
			to state the desired event:
		</p>
		<ul class="ui list">
			<li class="item"><span class="highlight">onDocumentCreated</span></li>
			<li class="item"><span class="highlight">onChildCreated</span></li>
			<li class="item"><span class="highlight">onAccessPointCreated</span></li>
			<li class="item"><span class="highlight">onDocumentModified</span></li>
			<li class="item"><span class="highlight">onDocumentDeleted</span></li>
			<li class="item"><span class="highlight">onMemberAdded</span></li>
			<li class="item"><span class="highlight">onMemberRemoved</span></li>
		</ul>

		<p>
			Going back to our example, we have identified the <span class="highlight">clients/</span> document as the <strong>subject</strong>, and now suppose that we want
			to know whenever a client is added or removed from the company. Because the <span class="highlight">clients/</span> document contains all the clients
			as its <span class="highlight">children</span> and we want to know whenever a client is added or removed, we can portrait this rule by saying:
			Whenever a <span class="highlight">client/</span> (child of <span class="highlight">clients/</span>) is created, <code>CHILD_CREATED</code>,
			or a <span class="highlight">client/</span> is deleted, <code>DOCUMENT_DELETED</code>, we want to adjust the budget of the company.<br>
		</p>

	</section>
	<!-- END: The Event -->


	<!-- START: Putting it all together -->
	<section class="mainContent-subSection">
		<h3 class="hidden">Putting it all together</h3>
		<p>With code, this rule would be portraited as:</p>

		<!-- START: Code example defining the subscription to an event -->
		<tabs>
			<tab title="TypeScript">

				<pre><code class="typescript">
					import * as PersistedDocument from "carbonldp/PersistedDocument";
					import * as Response from "carbonldp/HTTP/Response";
					import * as Events from "carbonldp/Messaging/Events";

					let carbon:Carbon;

					// ... initialize your Carbon object

					// Function to execute whenever the event happens
					function adjustBudget( event:ChildCreated.Class | DocumentDeleted.Class ):void {

						if( event.details ) {   // If it's a ChildCreated event
							console.log( event.details.createdDocuments.length );
						}
						console.log( "The budget has been updated" );
					}

					// Function to execute whenever the event fails
					function handleError( error:Error ):void { // ... }

					// Retrieve the subject
					carbon.documents.get( "clients/" ).then(
						( [ clientsDocument, response ]:[ PersistedDocument.Class, HTTP.Response.Class ] ) => &#123;
							// We've retrieved the subject
							console.log( clientsDocument );

							// Subscribing to CHILD_CREATED event
							clientsDocument.onChildCreated( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.CHILD_CREATED, adjustBudget, handleError );

							// Subscribing to DOCUMENT_DELETED event
							clientsDocument.onDocumentDeleted( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.DOCUMENT_DELETED, adjustBudget, handleError );

							let newClient:Client = {
								name: "Nikola",
								headquarters: "USA"
							}

							return clientsDocument.createChild( newClient );
						&#125;
					).then(
					    ( [ persistedClient, response ]:[ Client & PersistedDocument.Class, Response.Class ] ) => {

						    // Will print: 1 "The budget has been updated"

					        console.log( persistedClient.name ); // "Nikola"

							return persistedClient.delete();
					    }
					).then(
					    ( response:Response.Class ) => {
						    // Will print: "The budget has been updated"
					    }
					).catch( console.error );
				</code></pre>

			</tab>
			<tab title="JavaScript ES2015">

				<pre><code class="javascript">
					import * as PersistedDocument from "carbonldp/PersistedDocument";
					import * as Response from "carbonldp/HTTP/Response";
					import * as Messaging from "carbonldp/Messaging";

					let carbon;

					// ... initialize your Carbon object

					// Function to execute whenever the event happens
					function adjustBudget( event ):void {

						if( event.details ) {   // If it's a ChildCreated event
							console.log( event.details.createdDocuments.length );
						}
						console.log( "The budget has been updated" );
					}

					// Function to execute whenever the event fails
					function handleError( error ) { // ... }

					// Retrieve the subject
					carbon.documents.get( "clients/" ).then(
						( [ clientsDocument, response ] ) => &#123;
							// We've retrieved the subject
							console.log( clientsDocument );

							// Subscribing to CHILD_CREATED event
							clientsDocument.onChildCreated( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.CHILD_CREATED, adjustBudget, handleError );

							// Subscribing to DOCUMENT_DELETED event
							clientsDocument.onDocumentDeleted( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.DOCUMENT_DELETED, adjustBudget, handleError );

							let newClient = {
								name: "Nikola",
								headquarters: "USA"
							}

							return clientsDocument.createChild( newClient );
						&#125;
					).then(
					    ( [ persistedClient, response ] ) => {

						    // Will print: 1 "The budget has been updated"

					        console.log( persistedClient.name ); // "Nikola"

					        return persistedClient.delete();
					    }
					).then(
					    ( response ) => {
						    // Will print: "The budget has been updated"
					    }
					).catch( console.error );
				</code></pre>

			</tab>
			<tab title="JavaScript ES5">

				<pre><code class="javascript">
					var carbon;

					// ... initialize your Carbon object

					// Function to execute whenever the event happens
					function adjustBudget( event ):void {

						if( event.details ) {   // If it's a ChildCreated event
							console.log( event.details.createdDocuments.length );
						}
						console.log( "The budget has been updated" );
					}

					// Function to execute whenever the event fails
					function handleError( error ) { // ... }

					// Retrieve the subject
					carbon.documents.get( "clients/" ).then(
						( result ) => &#123;
							var clientsDocument = result[ 0 ];
							var response = result[ 1 ];

							// We've retrieved the subject
							console.log( clientsDocument );

							// Subscribing to CHILD_CREATED event
							clientsDocument.onChildCreated( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( "CHILD_CREATED", adjustBudget, handleError );

							// Subscribing to DOCUMENT_DELETED event
							clientsDocument.onDocumentDeleted( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( "DOCUMENT_DELETED", adjustBudget, handleError );

							let newClient = {
								name: "Nikola",
								headquarters: "USA"
							}

							return clientsDocument.createChild( newClient );
						&#125;
					).then(
					    ( result ) => {

							var persistedClient = result[ 0 ];
							var response = result[ 1 ];

						    // Will print: 1 "The budget has been updated"

					        console.log( persistedClient.name ); // "Nikola"

					        return persistedClient.delete();
					    }
					).then(
					    ( response ) => {
						    // Will print: "The budget has been updated"
					    }
					).catch( console.error );
				</code></pre>
			</tab>
		</tabs>
		<!-- END: Code example defining the subscription to an event -->

		<p>And that's it, we have successfully created two subscriptions to handle events using the <span class="highlight">PersistedDocument.Class</span>.</p>

	</section>
	<!-- END: Putting it all together -->


</section>
<!-- END: Subscribing -->


<!-- START: Using the Documents Service -->
<section class="mainContent-subSection">
	<h3 class="hidden">Using the Documents Service</h3>
	<p>
		Notice how we managed to create the subscriptions using the <span class="highlight">PersistedDocument.Class</span>.<br>
		First, we had to retrieve the subject, then identify the events and their respective actions and finally we proceeded to code the subscriptions.
	</p>
	<p>
		Now, suppose that you want to know whenever a <span class="highlight">client/</span> signs a contract for a new project so you can update the sales
		forecast of your company.
		To do so, you've decided to store every project as a child of a <span class="highlight">client/</span>. If we look at the list of
		<a href="#the-event">available events</a>, someone could say:<br>
		<i>"Because every project will be a <u>children</u> of a client,
			perhaps I could subscribe to <code>CHILD_CREATED</code> events for every client"</i> and then proceeds to code those subscriptions.<br>
		Well, this approach introduces a lot of issues because the number of clients will vary and for every client you'll also have to create
		a subscription, which could easily result in a massive amount of requests just to keep the subscriptions alive. This of course is not efficient aside
		of also being very cumbersome to maintain and by no means is recommended when developing any application.<br>
		So, how could we create a subscription that handles that requirement?<br>
	</p>
	<p>
		If we look at the <a href="#subscribing">structure</a> of the example platform, every <span class="highlight">client/</span> is a child of
		<span class="highlight">clients/</span> and because we decided that every <span class="highlight">project/</span> will be stored as a child of <span class="highlight">client/</span>,
		this means that every <span class="highlight">project/</span> will be a <i>grandchild</i> of the <span class="highlight">clients/</span> document.<br>
		If we look again at the list of events, there isn't a <code>GRANDCHILD_CREATED</code> event to subscribe from <span class="highlight">clients/</span>,
		so how can we detect whenever a grandchild is created?
		<br>
		Well, there is another powerful way to create subscriptions with the SDK and is by using the <span class="highlight">documents</span> service.
	</p>
	<p>
		As said in the <a href="#the-event">events</a> section, the <span class="highlight">documents</span> service allows us to use the same methods that
		<span class="highlight">PersistedDocument.Class</span> provides to subscribe to events, the difference with using the <span class="highlight">documents</span>
		service is that it also lets us specify an <a href="https://ant.apache.org/manual/dirtasks.html" target="_blank">Ant pattern</a> to work with hierarchical subscriptions.<br>
		The patterns that can be used are the following:
	</p>
	<table class="ui collapsed striped compact small table">
		<thead>
			<tr>
				<th>Ant pattern</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>*</td>
				<td>Every children only</td>
			</tr>
			<tr>
				<td>**</td>
				<td>Every children or children of the children and son on...</td>
			</tr>
		</tbody>
	</table>
	<p>
		Typically, <a href="https://ant.apache.org/manual/dirtasks.html" target="_blank">Ant patterns</a> allow us to search for something in a given directory (*) or in any sub-level of a directory (**), but with Carbon, they
		are being used with subscriptions to specify <span class="highlight">document</span>s to subscribe to,
		so the patterns allows us to subscribe to whatever happens in a given <span class="highlight">document</span> (*) or in any sub-level of that <span class="highlight">document</span> (**).
		With that in mind, now we can create the subscriptions to meet the requirement successfully:
	</p>


	<!-- START: Code example defining the subscription to an event using the documents service -->
	<tabs>
		<tab title="TypeScript">

				<pre><code class="typescript">
					import * as PersistedDocument from "carbonldp/PersistedDocument";
					import * as Response from "carbonldp/HTTP/Response";
					import * as Events from "carbonldp/Messaging/Events";

					let carbon:Carbon;

					// ... initialize your Carbon object

					// Function to execute whenever the event happens
					function adjustBudget( event:ChildCreated.Class | DocumentDeleted.Class ):void {

						if( event.details ) {   // If it's a ChildCreated event
							console.log( event.details.createdDocuments.length );
						}
						console.log( "The budget has been updated" );
					}

					// Function to execute whenever a project of an client is created/deleted
					function updateSalesForecast( event:ChildCreated.Class ):void {

						console.log( event.details.createdDocuments.length );
						// ...
						console.log( "The Sales forecast has been updated" );
					}

					// Function to execute whenever the event fails
					function handleError( error:Error ):void { // ... }


					// Retrieve the subject
					carbon.documents.get( "clients/" ).then(
						( [ clientsDocument, response ]:[ PersistedDocument.Class, HTTP.Response.Class ] ) => &#123;
							// We've retrieved the subject
							console.log( clientsDocument );

							// Subscribing to CHILD_CREATED event
							clientsDocument.onChildCreated( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.CHILD_CREATED, adjustBudget, handleError );

							// Subscribing to DOCUMENT_DELETED event
							clientsDocument.onDocumentDeleted( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.DOCUMENT_DELETED, adjustBudget, handleError );

							// Subscribing to CHILD_CREATED event of every client
							carbon.documents.on( Events.CHILD_CREATED, "clients/*", updateSalesForecast, handleError );


							let newClient:Client = {
								name: "Nikola",
								headquarters: "USA"
							}

							// Persist the client to trigger the adjustBudget subscription
							return clientsDocument.createChild( newClient );
						&#125;
					).then(
					    ( [ persistedClient, response ]:[ Client & PersistedDocument.Class, Response.Class ] ) => {

						    // Will print: 1 "The budget has been updated"

					        console.log( persistedClient.name ); // "Nikola"

							let project:Project = {
								name: "Brand Renovation",
								duration: "90 days"
							}

							// Persist the project to trigger the updateSalesForecast subscription
							return persistedClient.createChild( project );
					    }
					).then(
					    ( [ persistedProject, response ]:[ Project & PersistedDocument.Class, Response.Class ] ) => {

							// Will print: 1 "The Sales forecast has been updated"

					        console.log( persistedRelative.name); // "Brand Renovation"
							console.log( persistedRelative.duration ); // "90 days"
					    }
					).catch( console.error );
				</code></pre>

		</tab>
		<tab title="JavaScript ES2015">

				<pre><code class="javascript">
					import * as PersistedDocument from "carbonldp/PersistedDocument";
					import * as Response from "carbonldp/HTTP/Response";
					import * as Events from "carbonldp/Messaging/Events";

					let carbon;

					// ... initialize your Carbon object

					// Function to execute whenever the event happens
					function adjustBudget( event ):void {

						if( event.details ) {   // If it's a ChildCreated event
							console.log( event.details.createdDocuments.length );
						}
						console.log( "The budget has been updated" );
					}

					// Function to execute whenever a project of an client is created/deleted
					function updateSalesForecast( event ):void {

						console.log( event.details.createdDocuments.length );
						// ...
						console.log( "The Sales forecast has been updated" );
					}

					// Function to execute whenever the event fails
					function handleError( error ) { // ... }


					// Retrieve the subject
					carbon.documents.get( "clients/" ).then(
						( [ clientsDocument, response ] ) => &#123;
							// We've retrieved the subject
							console.log( clientsDocument );

							// Subscribing to CHILD_CREATED event
							clientsDocument.onChildCreated( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.CHILD_CREATED, adjustBudget, handleError );

							// Subscribing to DOCUMENT_DELETED event
							clientsDocument.onDocumentDeleted( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.DOCUMENT_DELETED, adjustBudget, handleError );

							// Subscribing to CHILD_CREATED event of every client
							carbon.documents.on( Events.CHILD_CREATED, "clients/*", updateSalesForecast, handleError );


							let newClient = {
								name: "Nikola",
								headquarters: "USA"
							}

							// Persist the client to trigger the adjustBudget subscription
							return clientsDocument.createChild( newClient );
						&#125;
					).then(
					    ( [ persistedClient, response ] ) => {

						    // Will print: 1 "The budget has been updated"

					        console.log( persistedClient.name ); // "Nikola"

							let project = {
								name: "Brand Renovation",
								duration: "90 days"
							}

							// Persist the project to trigger the updateSalesForecast subscription
							return persistedClient.createChild( project );
					    }
					).then(
					    ( [ persistedProject, response ] ) => {

							// Will print: 1 "The Sales forecast has been updated"

					        console.log( persistedRelative.name); // "Brand Renovation"
							console.log( persistedRelative.duration ); // "90 days"
					    }
					).catch( console.error );
				</code></pre>

		</tab>
		<tab title="JavaScript ES5">

				<pre><code class="javascript">
					var carbon;

					// ... initialize your Carbon object

					// Function to execute whenever the event happens
					function adjustBudget( event ):void {

						if( event.details ) {   // If it's a ChildCreated event
							console.log( event.details.createdDocuments.length );
						}
						console.log( "The budget has been updated" );
					}

					// Function to execute whenever a project of an client is created/deleted
					function updateSalesForecast( event ):void {

						console.log( event.details.createdDocuments.length );
						// ...
						console.log( "The Sales forecast has been updated" );
					}

					// Function to execute whenever the event fails
					function handleError( error ) { // ... }


					// Retrieve the subject
					carbon.documents.get( "clients/" ).then(
						( result ) => &#123;

							var clientsDocument = result[ 0 ];
							var response = result[ 1 ];

							// We've retrieved the subject
							console.log( clientsDocument );

							// Subscribing to CHILD_CREATED event
							clientsDocument.onChildCreated( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.CHILD_CREATED, adjustBudget, handleError );

							// Subscribing to DOCUMENT_DELETED event
							clientsDocument.onDocumentDeleted( adjustBudget, handleError );
							// It could also be done with clientsDocument.on( Events.DOCUMENT_DELETED, adjustBudget, handleError );

							// Subscribing to CHILD_CREATED event of every client
							carbon.documents.on( Events.CHILD_CREATED, "clients/*", updateSalesForecast, handleError );


							let newClient = {
								name: "Nikola",
								headquarters: "USA"
							}

							// Persist the client to trigger the adjustBudget subscription
							return clientsDocument.createChild( newClient );
						&#125;
					).then(
					    ( result ) => {

							var persistedClient = result[ 0 ];
							var response = result[ 1 ];

						    // Will print: 1 "The budget has been updated"

					        console.log( persistedClient.name ); // "Nikola"

							let project = {
								name: "Brand Renovation",
								duration: "90 days"
							}

							// Persist the project to trigger the updateSalesForecast subscription
							return persistedClient.createChild( project );
					    }
					).then(
					    ( result ) => {

							// Will print: 1 "The Sales forecast has been updated"

							var persistedProject = result[ 0 ];
							var response = result[ 1 ];

					        console.log( persistedRelative.name); // "Brand Renovation"
							console.log( persistedRelative.duration ); // "90 days"
					    }
					).catch( console.error );
				</code></pre>
		</tab>
	</tabs>
	<!-- END: Code example defining the subscription to an event using the documents service -->

</section>
<!-- END: Using the Documents Service -->


<!-- START: Messaging Service -->
<section class="mainContent-subSection">
	<h3 class="hidden">Messaging Service</h3>
	<p>
		We just saw how to subscribe to an event and execute a function depending on the event we subscribed to,
		but if you noticed, we didn't have to configure anything to actively check for events that occurred in the platform, we just had
		to code our desired subscriptions and that was it.
		So, how did the SDK know an event happened in the platform?<br>
	</p>
	<p>
		Well, the platform provides an endpoint which the SDK actively queries to verify whenever a subscription
		has occurred, that endpoint is <span class="highlight">http://your-platform-instance:8080/broker/</span>.

		The class in charge to establish connections to that endpoint is the <code>Carbon.Messaging.Service</code>, which
		provides the following methods to handle the connection:
	</p>
	<div class="ui bulleted list">

		<div class="item">
			<div class="content">
				<div class="header"><code>setOptions</code></div>
				<div class="description">You can specify the maxReconnectAttempts (10 attemps), and the reconnectDelay (1000ms) when a connection fails</div>
			</div>
		</div>

		<div class="item">
			<div class="content">
				<div class="header"><code>connect</code></div>
				<div class="description">Connects the service to the platform messaging broker. If the service is already connected, an error will be thrown.</div>
			</div>
		</div>

		<div class="item">
			<div class="content">
				<div class="header"><code>reconnect</code></div>
				<div class="description">Reconnects the service to the Platform broker. If the service is already connected, it will be closed and opened again.</div>
			</div>
		</div>

	</div>


	<p>
		Whenever you subscribe to an event, if you haven't called the <code>connect</code> or <code>reconnect</code> methods, the SDK will automatically
		connect to the <span class="highlight">broker/</span> endpoint and will actively poll that connection. That gives you the flexibility to just dive into
		code the subscriptions without worrying about opening and closing connections.<br>
		If you ever want to change the default options -maxReconnectAttempts (10 attemps), -reconnectDelay (1000ms) of the connection, you can do so whenever you want,
		even if the service is already connected.
	</p>
</section>
<!-- END: Messaging Service -->


<!-- START: Conclusion -->
<section class="mainContent-section">
	<h2>Conclusion</h2>
	<p>
		The SDK immediately notifies whenever an event occurs thanks to subscriptions.<br>
		A subscription is formed of a <u>subject</u> (<span class="highlight">document</span>), and <u>event</u> and and <u>action</u> to trigger when the event occurs.<br>
	</p>
	<p>
		A subscription can be created using the <code>on</code> method of the <span class="highlight">PersistedDocument.Class</span> or the <span class="highlight">documents</span> service.<br>
		The difference between <span class="highlight">PersistedDocument.Class</span> and the <span class="highlight">documents</span> service is that <span class="highlight">documents</span> service
		lets you specify <a href="https://ant.apache.org/manual/dirtasks.html" target="_blank">Ant patterns</a> to subscribe to multiple levels of an endpoint whereas the
		<span class="highlight">PersistedDocument.Class</span> don't.<br>
	</p>
	<p>
		The <code>Carbon.Messaging.Service</code> is the responsible to handle the connections to the <span class="highlight">broker/</span> endpoint of the platform and with it, you can configure
		the maxReconnectAttempts and the reconnectDelay of the active connection to that endpoint.
	</p>
</section>
<!-- END: Conclusion -->
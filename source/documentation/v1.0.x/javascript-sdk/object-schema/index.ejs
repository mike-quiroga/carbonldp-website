---
layout: document
title: Object schema
description: What is the object schema, how to define and use it.
date: 2017-02-08 12:08:58
pathPartialURL: javascript-sdk/object-schema
---

<h1>Object schema</h1>
					
<div class="documentation-steps ui fluid steps">
	<a class="step" href="../object-model">
		<i class="arrow left icon"></i>
		<div class="content">
			<div class="title">Previous</div>
			<div class="description">Object model</div>
		</div>
	</a>
	<div class="active step">
		<div class="content">
			<div class="title">Object schema</div>
		</div>
	</div>
	<a class="step" href="../files">
		<i class="arrow right icon"></i>
		<div class="content">
			<div class="title">Next</div>
			<div class="description">Files</div>
		</div>
	</a>
</div>

<div class="ui message">
	<div class="content">
		<p>For convenience, the SDK does its best to try to guess your desired outcome when saving and retrieving documents. It tries to parse known data types into
			native JavaScript types and vice-versa. But sometimes there is not enough data for the SDK to correctly guess the expected behavior. To make sure the SDK behaves as
			expected, a web application can give more information about properties and objects to the SDK through an object schema.</p>
		<p>Any <code>carbon</code> object has an object schema that can be <em>extended</em> through the <code>extendObjectSchema</code> method.</p>
	</div>
</div>
<div class="ui mobile only grid">
	<div class="row">
		<staticContentMenu content="mainContent"></staticContentMenu>
	</div>
</div>
<section class="mainContent-section">
	<h2 class="hidden">Introduction</h2>
	<p>Even though the information stored in the platform can seem to be normal JSON, it is not. If you haven't read about the
		<a href="/documents/linked-data-concepts">Essential Concepts of Linked Data</a> don't worry, you won't need them to understand the basics behind object schemas,
		but it wouldn't hurt you to read them either.</p>
	<p>The platform stores each document as a set of statements (or RDF <em>triples</em>). These statements together comprise an entity or resource. For example, the following
		object:</p>
	
	<pre><code class="javascript">
		var project = &#123;
			name: "Project 1",
			labels: [
				"critical",
				"hr",
				"example"
			],
			createdOn: new Date( 2016, 9, 25 )
		&#125;;
	</code></pre>
	
	<p>Would be saved as statements that can be read:</p>
	<ul>
		<li><strong>project</strong> has the <strong>name</strong>, <strong>Project 1</strong> (which is a <strong>string</strong>)</li>
		<li><strong>project</strong> has the <strong>label</strong>, <strong>critical</strong> (which is a <strong>string</strong>)</li>
		<li><strong>project</strong> has the <strong>label</strong>, <strong>hr</strong> (which is a <strong>string</strong>)</li>
		<li><strong>project</strong> has the <strong>label</strong>, <strong>example</strong> (which is a <strong>string</strong>)</li>
		<li><strong>project</strong> was <strong>createdOn</strong>, <strong>2016/09/25</strong> (which is a <strong>date</strong>)</li>
	</ul>
	<p>There are a couple of things to notice here:</p>
	<ul>
		<li>The platform saves the type of each property's value</li>
		<li>It doesn't save information about the value of the property label being an array</li>
		<li>The statements aren't ordered</li>
	</ul>
	<p>Because of this there are several common pitfalls that you can fall into when developing web applications with Carbon:</p>
	<ul>
		<li>If you save a document with a property that has an array with only one value, and later on you retrieve the document, the property will point to the value
			directly. It won't be in an array.
		</li>
		<li>Any application that depends on an array keeping its order will behave randomly.</li>
		<li>If your Carbon application is being used by several web applications, a web application could save statements about a property that other web applications don't
			expect (nor understand).
		</li>
	</ul>
	<p>All of these pitfalls can be overcome by using <strong>Object Schemas</strong>.</p>
</section>
<section class="mainContent-section">
	<h2>What is an object schema?</h2>
	<p>An object schema provides information about the properties the SDK can expect. On it, a web application can force the SDK to treat values as arrays, force arrays to be
		ordered, tell the SDK to ignore values of unknown types, etc.</p>
	<p>The object schema is stored inside of your <code>carbon</code> object, and it applies to all your stored documents.
	</p>
	<p>To provide new information to the object schema the <code>carbon.extendObjectSchema</code> method can be used:</p>
	
	<pre><code class="javascript">
		carbon.extendObjectSchema( &#123;
			// New information
		&#125; );
	</code></pre>
	
	<p>The object passed to the <code>extendObjectSchema</code> method is a <code>@context</code> object defined in the <a
			href="https://www.w3.org/TR/json-ld/#the-context" target="_blank" rel="noopener">JSON-LD specification</a>. If you aren't familiar with that specification, don't worry.
		You don't need to understand the specification to be able to use object schemas, but again, the more information you posses, the better.</p>
	<p>Properties inside of the object passed to <code>extendObjectSchema</code> will describe different aspects of the schema your instance will use.</p>
</section>
<section class="mainContent-section">
	<h2>Properties</h2>
	<p>To provide information about the properties your application objects will have, a property with the same name needs to be defined on the object schema:</p>
	
		<pre><code class="javascript">
			carbon.extendObjectSchema( &#123;
				"labels": &#123;
					// Metadata of the "labels" property
				&#125;
			&#125; );
		</code></pre>
		
	<section class="mainContent-subSection">
		<h3>Collections (@container)</h3>
		<p>Properties by default are assumed to be one value only unless proven otherwise. That's why if you save a document with a property that holds an array with one
			value, once you retrieve it you'll receive only the value, not the array.</p>
		<p>To specify that a property is always going to hold an array, you can declare the <code>@container</code> property on the object that describes the property.</p>
		<p>That property will need to have one of the following values depending on what collection type you want to have:</p>
		<ul>
			<li><code>@set</code>: for unordered arrays (meaning retrieving a document with that property several times will yield different results)</li>
			<li><code>@list</code>: for ordered arrays (keep in mind that this type of collection takes more space and is more expensive overall)</li>
			<li><code>@map</code>: for language based maps (TO BE DOCUMENTED)</li>
		</ul>
		<p>For example, imagine that the application handled objects like the following one:</p>
		
			<pre><code class="javascript">
				var project = &#123;
					labels: [
						"important"
					],
					tasks: [
						&#123;
							title: "Do something"
						&#125;,
						&#123;
							title: "Then do something else"
						&#125;,
					]
				&#125;;
			</code></pre>
			
		<p>The <code>labels</code> property is going to have a collection as a value, but it doesn't need to keep it's order. After all, its only valuable information is
			that it "has" this and that label.</p>
		<p>On the other hand, the <code>tasks</code> property needs to keep the order of tasks because it indicates the order of their execution or importance.</p>
		<p>The object schema should be extended as follows:</p>
		
			<pre><code class="javascript">
				carbon.extendObjectSchema( &#123;
					"labels": &#123;
						"@container": "@set"
					&#125;,
					"tasks": &#123;
						"@container": "@list"
					&#125;
				&#125; );
			</code></pre>
			
		<p>Having done that, persisting the resource and then reading it again will yield the expected results.</p>
	</section>
	<section class="mainContent-subSection">
		<h3>Data types (@type)</h3>
		<p>The SDK does a really good job on saving values with the right data type. Strings will be saved as strings, booleans will be saved as booleans, etc. But imagine
			the following scenario:</p>
		<ol>
			<li>Application A and B are developed using the same platform instance to store their data</li>
			<li>Both applications are programmed to understand Project objects with a property "content" that holds a string</li>
			<li>Later on complex "content" properties are added to application B. Now app B understands "content" properties that hold objects (with a type, and other
				properties).
			</li>
		</ol>
		<p>Because application A hasn't been updated, and both apps are using the same data, app A is probably going to crash whenever it finds a complex "content" property
			.</p>
		<p>To avoid this, it is a good practice to define what type the property is meant to have on each application. This is done by specifying a <code>@type</code>
			property on the object that describes the property "content":
		</p>
		
			<pre><code class="javascript">
				carbon.extendObjectSchema( &#123;
					"content": &#123;
						"@type": "string"
					&#125;
				&#125; );
			</code></pre>
			
		<p>If the application A has its object schema set this way it won't have a problem. The SDK will filter any "content" non string value when retrieving the project.</p>
		<p>The most common accepted types are:</p>
		<ul>
			<li><code>@id</code>: When the value type is a pointer to another object</li>
			<li><code>string</code></li>
			<li><code>boolean</code></li>
			<li><code>integer</code></li>
			<li><code>double</code></li>
			<li><code>float</code></li>
			<li><code>long</code></li>
			<li><code>date</code></li>
			<li><code>dateTime</code></li>
			<li><code>time</code></li>
		</ul>
		<p>All of these types (except <code>@id</code>) are part of the <a href="https://www.w3.org/TR/xmlschema-2/" target="_blank" rel="noopener">xml schema data
				types.</a></p>
	</section>
	<section class="mainContent-subSection">
		<h3>IDs (@id)</h3>
		<p>So far we have solved all of the problems we stated at the start of this document. But there's another problem lurking around. Imagine the following scenario:</p>
		<ul>
			<li>Application <strong>A</strong> and application <strong>B</strong> want to share data by using the same platform instance</li>
			<li>
				<p>Application <strong>A</strong> handles objects like the following one:</p>
				
				<pre><code class="javascript">
					var client = &#123;
						name: "Miguel",
						lastName: "Aragón"
					&#125;;
				</code></pre>
				
			</li>
			<li>
				<p>On the other hand application <strong>B</strong> was programmed to handle objects like this:</p>
				
				<pre><code class="javascript">
					var client = &#123;
						firstName: "Cody",
						lastName: "Burleson"
					&#125;;
				</code></pre>
				
			</li>
		</ul>
		<p>These two applications will not be able to integrate because they use a different property for the same purpose. Application <strong>A</strong> uses
			<code>name</code> to refer to first names, and application <strong>B</strong> uses <code>firstName</code> instead.</p>
		<p>There are two options: one application renames the property to use the same as the other application (expensive!), or they define the same <code>@id</code> on their
			own object schema.</p>
		<p>The property <code>@id</code> configures the unique id the property will have when saved on the platform. That way even if two or more applications are using
			different property names for the same "real" property, they can integrate by using a unique id for that property.</p>
		<p>In this example the problem would be solved by following these steps:</p>
		<ul>
			<li>
				<p>Application <strong>A</strong> extends its object schema like this:</p>
				
				<pre><code class="javascript">
					carbon.extendObjectSchema( &#123;
						"name": &#123;
							"@id": "lastName",
							"@type": "string"
						&#125;
					&#125; );
				</code></pre>
				
			</li>
			<li>
				<p>Application <strong>B</strong> extends its this way:</p>
				
				<pre><code class="javascript">
					carbon.extendObjectSchema( &#123;
						"lastName": &#123;
							"@id": "lastName",
							"@type": "string"
						&#125;
					&#125; );
				</code></pre>
				
			</li>
		</ul>
		<p>With that setup, the SDK will translate the properties when saving or retrieving documents and both of the applications will be using the same <em>standardized</em>
			name for their properties.</p>
	</section>
	<section class="mainContent-subSection">
		<h3>Vocabularies</h3>
		<p>Storing properties with names like <code>name</code> or <code>title</code> is meant to cause collisions. An application could use "name" to define people's
			first names while another one could use it to define their complete name. Or even worse, they could use it to define the name of a country.</p>
		<p>That's why by default each time a new property is saved to your platform it is saved as a uniform resource identifier (URI). For example, if your JavaScript
			application saves an object with a property <code>title</code>, the property will actually be saved as something like:</p>
		<p><code>http://localhost:8083/vocabulary/#title</code></p>
		<p>Let's decompose that URI:</p>
		<ul>
			<li><code>http://</code>: The protocol your platform instance is configured with</li>
			<li><code>localhost</code>: The address of your platform instance</li>
			<li><code>:8083</code>: The port the platform instance is listening on</li>
			<li><code>vocabulary/</code>: A document inside of your Carbon app</li>
			<li><code>#title</code>: The slug of a fragment inside of the <code>vocabulary/</code> document</li>
		</ul>
		<p>This means that the property is saved using the id of a fragment, inside of a document called <code>vocabulary/</code> from your platform instance.</p>
		<p>By doing this, you are able to go and save data about the property itself. You could for example go and add a description to the property by modifying the
			<code>vocabulary/</code> document:</p>
		<tabs>
			<tab title="TypeScript">
				
				<pre><code class="typescript">
					import * as HTTP from "carbonldp/HTTP";
					import * as PersistedDocument from "carbonldp/PersistedDocument";
					import * as PersistedFragment from "carbonldp/PersistedFragment";

					// ... initialize your Carbon object

					// ... authenticate if needed

					carbon.get( "vocabulary/" ).then(
						( [ vocabulary, response ]:[ PersistedDocument.Class, HTTP.Response.Class ] ) => &#123;
							let title:PersistedFragment.Class = vocabulary.getFragment( "title" );

							// Add metadata about the title property
							title.description = "The title of a book";

							return vocabulary.save();
						&#125;
					).then(
						( response:HTTP.Response.Class ) => &#123;
							// ...
						&#125;
					).catch( console.error );
				</code></pre>
				
			</tab>
			<tab title="JavaScript ES2015">
				
				<pre><code class="javascript">

					// ... initialize your Carbon object

					// ... authenticate if needed

					carbon.get( "vocabulary/" ).then(
						( [ vocabulary, response ] ) => &#123;
							let title = vocabulary.getFragment( "title" );

							// Add metadata about the title property
							title.description = "The title of a book";

							return vocabulary.save();
						&#125;
					).then(
						( response ) => &#123;
							// ...
						&#125;
					).catch( console.error );
				</code></pre>
				
			</tab>
			<tab title="JavaScript ES5">
				
				<pre><code class="javascript">

					// ... initialize your Carbon object

					// ... authenticate if needed

					carbon.get( "vocabulary/" ).then(
						function( result ) &#123;
							var vocabulary = result[ 0 ];
							var title = vocabulary.getFragment( "title" );

							// Add metadata about the title property
							title.description = "The title of a book";

							return vocabulary.save();
						&#125;
					).then(
						function( response ) &#123;
							// ...
						&#125;
					).catch( console.error );
				</code></pre>
				
			</tab>
		</tabs>
		<p>The default document those fragments are saved in is called <code>vocabulary</code> because it collects all of the terms you use in your application. By developing an
			application you are essentially creating a new vocabulary.</p>
		<p>If that's the case you may think: "Well what if I reuse the terms from one application on another one?". Well, that's one of the main advantages of building a
			vocabulary!</p>
		<p>If you have a Carbon application (application <strong>A</strong>) with an already established amount of terms, and you want to create a new Carbon app (application
			<strong>B</strong>) that understands data from your already existing application you can accomplish it by defining the <code>@id</code> of the property in the object
			schema:</p>
		
		<pre><code class="javascript">
			// In application B
			carbon.extendObjectSchema( &#123;
				"title": &#123;
					"@id": "http://{platform-A-host}/vocabulary/#title"
				&#125;
			&#125; );
		</code></pre>
		
		<p><strong>Note</strong>: This is only needed if your applications are not sharing a platform instance.</p>
		<p>Sharing vocabularies opens a lot of interesting possibilities. For example, you could create your own vocabulary that only contains terms about social connections.
			Or one that is only about geo location terms. Later on you could make those vocabularies public so other people could use them and make their data compatible with
			each other!</p>
		<p>Well guess what? People have been doing that for quite some time. There are a lot of well established vocabularies that you can use on your application to make your
			data worldwide compatible. You can search for these vocabularies using the <a href="https://lov.okfn.org/dataset/lov/" target="_blank" rel="noopener">Linked Open
				Vocabulary searcher</a>.</p>
		<p>It is <strong>highly recommended</strong> to use existing vocabularies instead of new, custom ones.</p>
	</section>
</section>
<section class="mainContent-section">
	<h2>Prefixes</h2>
	<p>If you start using other vocabularies (either from other platform instances, or from well established vocabularies), you might find it cumbersome to have to write complete URIs
		when extending object schemas.</p>
	<p>Prefixes come to the rescue! A prefix is a short keyword that can be used as a base of a URI. For example, having the following URI:</p>
	<p><code>http://localhost:8083/vocabulary/#title</code></p>
	<p>You could define the prefix <code>platformA</code> and make it equivalent to <code>http://localhost:8083/vocabulary/#</code>. That way each time you
		want to use that vocabulary you would only need to write <code>platformA:title</code>.</p>
	<p>Prefixes can be defined in the object schema by defining a property with a string value. The previous example could be defined like this:</p>
	
	<pre><code class="javascript">
		carbon.extendObjectSchema( &#123;
			"platformA": "http://localhost:8083/vocabulary/#",
			"title": &#123;
				"@id": "platformA:title",
				"@type": "string"
			&#125;,
			"content": &#123;
				"@id": "platformA:content",
				"@type": "string"
			&#125;
		&#125; );
	</code></pre>
	
</section>
<section class="mainContent-section">
	<h2>Object types</h2>
	<p>There's a problem left to solve. Imagine an application programmed to handle <code>book</code> objects and <code>blog post</code> objects like the following:</p>
	
	<pre><code class="javascript">
		var book = &#123;
			title: "The most awesome book you'll ever read"
		&#125;;

		var blogPost = &#123;
			title: "How jellyfish age"
		&#125;;
	</code></pre>
	
	<p>Here the problem lies in that both objects use the same property name, <code>title</code>, but they use it for different purposes. A book title cannot be interpreted as
		a blog post title, and if you try to differentiate them by extending the object schema you won't be able to (at least not in the way we have done it so far)
		:</p>
	
	<pre><code class="javascript">
		carbon.extendObjectSchema( &#123;
			"title": &#123;
				"@id": "bookTitle"
			&#125;,
			"title": &#123;         // ERROR: Duplicate property name
				"@id": "postTitle"
			&#125;
		&#125; );
	</code></pre>
	
	<p>To make a distinction between them, first you need to tag each object with a different type. Types help you <em>tag</em> objects to treat them differently. With them you can
		filter a list of objects, apply specific rules depending on their types, make assumptions on the properties they'll have based on their types, etc.</p>
	<p>You can tag objects when saving them as documents:</p>
	<tabs>
		<tab title="TypeScript">
			
			<pre><code class="typescript">
				import * as HTTP from "carbonldp/HTTP";
				import * as PersistedDocument from "carbonldp/PersistedDocument";

				let carbon:Carbon

				// ... initialize your Carbon object

				// ... authenticate if needed

				carbon.documents.createChild( &#123;
					types: [
						"Book"
					]
				&#125; ).then(
					( [ book, response ]:[ PersistedDocument.Class, HTTP.Response.Class ] ) => &#123;
						// ...
					&#125;
				).catch( console.error );
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES2015">
			
			<pre><code class="javascript">
				let carbon;

				// ... initialize your Carbon object

				// ... authenticate if needed

				carbon.documents.createChild( &#123;
					types: [
						"Book"
					]
				&#125; ).then(
					( [ book, response ] ) => &#123;
						// ...
					&#125;
				).catch( console.error );
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES5">
			
			<pre><code class="javascript">
				var carbon;

				// ... initialize your Carbon object

				// ... authenticate if needed

				carbon.documents.createChild( &#123;
					types: [
						"Book"
					]
				&#125; ).then(
					function( result ) &#123;
						// ...
					&#125;
				).catch( console.error );
			</code></pre>
			
		</tab>
	</tabs>
	<p>Or you can add or remove types from persisted resources with the <code>addType</code> and <code>removeType</code>:</p>
	<tabs>
		<tab title="TypeScript">
			
			<pre><code class="typescript">
				import * as HTTP from "carbonldp/HTTP";
				import * as PersistedDocument from "carbonldp/PersistedDocument";

				let carbon:Carbon

				// ... initialize your Carbon object

				// ... authenticate if needed

				carbon.documents.get&#60;Book&#62;( "books/awesome-book/" ).then(
					( [ book, response ]:[ Book & PersistedDocument.Class, HTTP.Response.Class ] ) => &#123;
						book.addType( "Book" );
						book.removeType( "UncategorizedObject" ); // Not actually a type, just an example

						return book.save&#60;Book&#62;();
					&#125;
				).then(
					( [ book, response ]:[ Book & PersistedDocument.Class, HTTP.Response.Class ] ) => &#123;
						// ...
					&#125;
				).catch( console.error );
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES2015">
			
			<pre><code class="javascript">
				let carbon;

				// ... initialize your Carbon object

				// ... authenticate if needed

				carbon.documents.get( "books/awesome-book/" ).then(
					( [ book, response ] ) => &#123;
						book.addType( "Book" );
						book.removeType( "UncategorizedObject" ); // Not actually a type, just an example

						return book.save();
					&#125;
				).then(
					( [ book, response ] ) => &#123;
						// ...
					&#125;
				).catch( console.error );
			</code></pre>
			
		</tab>
		<tab title="JavaScript ES5">
			
			<pre><code class="javascript">
				var carbon;

				// ... initialize your Carbon object

				// ... authenticate if needed

				carbon.documents.get( "books/awesome-book/" ).then(
					function( result ) &#123;
						var book = result[ 0 ];
						book.addType( "Book" );
						book.removeType( "UncategorizedObject" ); // Not actually a type, just an example

						return book.save();
					&#125;
				).then(
					function( result ) &#123;
						// ...
					&#125;
				).catch( console.error );
			</code></pre>
			
		</tab>
	</tabs>
	<p>Once you tag your objects like that you can extend a type specific object schema by defining the type to be extended as the first parameter of
		<code>extendObjectSchema</code>:</p>
	
	<pre><code class="javascript">
		carbon.extendObjectSchema( "Book", &#123;
			"title": &#123;
				"@id": "bookTitle",
				"@type": "string"
			&#125;
		&#125; );
		carbon.extendObjectSchema( "BlogPost", &#123;
			"title": &#123;
				"@id": "postTitle",
				"@type": "string"
			&#125;
		&#125; );
	</code></pre>
	
	<p>That way the SDK will treat them as different properties. Extending the object schema without specifying a type is called
		<strong>"extending the GLOBAL object schema"</strong>, and specifying a type is called <strong>"extending the type's object schema"</strong>.</p>
	<p>The following rules apply to the type's object schemas:</p>
	<ul>
		<li>Any property or prefix defined in the global schema will also be defined in a type schema</li>
		<li>If a type schema defines a property that the global schema already defined, the type schema property will apply</li>
	</ul>
	<p>It is a good practice to define <strong>prefixes</strong> in the global schema, and <strong>properties</strong> in a type specific object schema.</p>
</section>
<!--<section class="mainContent-section">-->
<!--<h2>Inheritance</h2>-->
<!--<p></p>-->
<!--</section>-->
<section class="mainContent-section">
	<h2>Conclusion</h2>
	<p>The SDK does its best to try to guess the desired outcome of retrieving documents or saving new ones. It tries to parse known data types into
		native JavaScript types and vice versa. But sometimes there is not enough data for the SDK to correctly guess the expected behavior. To make sure the SDK behaves as
		expected, a web application can give more information about properties and objects to the SDK through an object schema.</p>
	<p>Any <code>carbon</code> object has an object schema that can be <em>extended</em> through the <code>extendObjectSchema</code> method.</p>
	<p>When extending object schemas properties can be described by declaring a property with an object value. The following properties can be inside that object:</p>
	<ul>
		<li><code>@id</code>: To specify the URI to use for the property</li>
		<li><code>@type</code>: To declare what data types the application expects on that property</li>
		<li>
			<code>@container</code>: To force the SDK to use a specific container type for the property:
			<ul>
				<li><code>@set</code>: Unordered list</li>
				<li><code>@list</code>: Ordered list</li>
				<li><code>@map</code>: Language based map</li>
			</ul>
		</li>
	</ul>
	<p>Prefixes can be defined by declaring a property with a string value. Prefixes can be used to shorten any URI.</p>
</section>
<div class="documentation-steps ui fluid steps">
	<a class="step" href="../object-model">
		<i class="arrow left icon"></i>
		<div class="content">
			<div class="title">Previous</div>
			<div class="description">Object model</div>
		</div>
	</a>
	<div class="active completed step">
		<!--<i class="payment icon"></i>-->
		<div class="content">
			<div class="title">Object schema</div>
		</div>
	</div>
	<a class="step" href="../files">
		<i class="arrow right icon"></i>
		<div class="content">
			<div class="title">Next</div>
			<div class="description">Files</div>
		</div>
	</a>
</div>
				